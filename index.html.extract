<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8">
<title>
Rebrained! | Quick, Blog it before I forget it&#8230;	</title>
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="stylesheet" type="text/css" media="all" href="/wp-content/themes/twentyten/style.css">
<link rel="pingback" href="/xmlrpc.php">
<meta name="robots" content="max-image-preview:large">
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="alternate" type="application/rss+xml" title="Rebrained! &raquo; Feed" href="/?feed=rss2">
<link rel="alternate" type="application/rss+xml" title="Rebrained! &raquo; Comments Feed" href="/?feed=comments-rss2">
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"🏳️‍⚧️","🏳️​⚧️")?!1:!n(e,"🇺🇳","🇺​🇳")&&!n(e,"🏴󠁧󠁢󠁥󠁮󠁧󠁿","🏴​󠁧​󠁢​󠁥​󠁮​󠁧​󠁿");case"emoji":return!n(e,"🐦‍🔥","🐦​🔥")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id="wp-emoji-styles-inline-css" type="text/css">img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}</style>
<link rel="stylesheet" id="wp-block-library-css" href="/wp-includes/css/dist/block-library/style.min.css?ver=6.8.1" type="text/css" media="all">
<style id="wp-block-library-theme-inline-css" type="text/css">.wp-block-audio :where(figcaption){color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-audio :where(figcaption){color:#ffffffa6}.wp-block-audio{margin:0 0 1em}.wp-block-code{border:1px solid #ccc;border-radius:4px;font-family:Menlo,Consolas,monaco,monospace;padding:.8em 1em}.wp-block-embed :where(figcaption){color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-embed :where(figcaption){color:#ffffffa6}.wp-block-embed{margin:0 0 1em}.blocks-gallery-caption{color:#555;font-size:13px;text-align:center}.is-dark-theme .blocks-gallery-caption{color:#ffffffa6}:root :where(.wp-block-image figcaption){color:#555;font-size:13px;text-align:center}.is-dark-theme :root :where(.wp-block-image figcaption){color:#ffffffa6}.wp-block-image{margin:0 0 1em}.wp-block-pullquote{border-bottom:4px solid;border-top:4px solid;color:currentColor;margin-bottom:1.75em}.wp-block-pullquote cite,.wp-block-pullquote footer,.wp-block-pullquote__citation{color:currentColor;font-size:.8125em;font-style:normal;text-transform:uppercase}.wp-block-quote{border-left:.25em solid;margin:0 0 1.75em;padding-left:1em}.wp-block-quote cite,.wp-block-quote footer{color:currentColor;font-size:.8125em;font-style:normal;position:relative}.wp-block-quote:where(.has-text-align-right){border-left:none;border-right:.25em solid;padding-left:0;padding-right:1em}.wp-block-quote:where(.has-text-align-center){border:none;padding-left:0}.wp-block-quote.is-large,.wp-block-quote.is-style-large,.wp-block-quote:where(.is-style-plain){border:none}.wp-block-search .wp-block-search__label{font-weight:700}.wp-block-search__button{border:1px solid #ccc;padding:.375em .625em}:where(.wp-block-group.has-background){padding:1.25em 2.375em}.wp-block-separator.has-css-opacity{opacity:.4}.wp-block-separator{border:none;border-bottom:2px solid;margin-left:auto;margin-right:auto}.wp-block-separator.has-alpha-channel-opacity{opacity:1}.wp-block-separator:not(.is-style-wide):not(.is-style-dots){width:100px}.wp-block-separator.has-background:not(.is-style-dots){border-bottom:none;height:1px}.wp-block-separator.has-background:not(.is-style-wide):not(.is-style-dots){height:2px}.wp-block-table{margin:0 0 1em}.wp-block-table td,.wp-block-table th{word-break:normal}.wp-block-table :where(figcaption){color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-table :where(figcaption){color:#ffffffa6}.wp-block-video :where(figcaption){color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-video :where(figcaption){color:#ffffffa6}.wp-block-video{margin:0 0 1em}:root :where(.wp-block-template-part.has-background){margin-bottom:0;margin-top:0;padding:1.25em 2.375em}</style>
<style id="classic-theme-styles-inline-css" type="text/css">/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}</style>
<style id="global-styles-inline-css" type="text/css">:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #fff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--blue: #0066cc;--wp--preset--color--medium-gray: #666;--wp--preset--color--light-gray: #f1f1f1;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}</style>
<link rel="stylesheet" id="twentyten-block-style-css" href="/wp-content/themes/twentyten/blocks.css?ver=20181018" type="text/css" media="all">
<link rel="stylesheet" id="enlighter-local-css" href="/wp-content/plugins/enlighter/resources/EnlighterJS.min.css?ver=3.10.0" type="text/css" media="all">
<link rel="https://api.w.org/" href="/index.php?rest_route=%2F">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="/xmlrpc.php?rsd">
<meta name="generator" content="WordPress 6.8.1">

<!-- BEGIN ExactMetrics v5.3.8 Universal Analytics - https://exactmetrics.com/ -->
<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-142617150-1', 'auto');
  ga('send', 'pageview');</script>
<!-- END ExactMetrics Universal Analytics -->
</head>

<body class="home blog wp-theme-twentyten">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<h1 id="site-title">
					<span>
						<a href="/" title="Rebrained!" rel="home">Rebrained!</a>
					</span>
				</h1>
				<div id="site-description">Quick, Blog it before I forget it&#8230;</div>

										<img src="/wp-content/themes/twentyten/images/headers/path.jpg" width="940" height="198" alt="">
								</div>
<!-- #branding -->

			<div id="access" role="navigation">
								<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu"><ul>
<li class="current_page_item"><a href="/">Home</a></li>
<li class="page_item page-item-2"><a href="/?page_id=2">About</a></li>
</ul></div>
			</div>
<!-- #access -->
		</div>
<!-- #masthead -->
	</div>
<!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">

			



	
			<div id="post-10101" class="post-10101 post type-post status-publish format-standard hentry category-programming tag-dynamic-programming">
			<h2 class="entry-title"><a href="/?p=10101" rel="bookmark">Dynamic Programming &#8211; basic examples</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=10101" title="3:19 am" rel="bookmark"><span class="entry-date">March 29, 2020</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>The key idea in Dynamic Programming (DP) is to generate a set of subproblems from a larger problem, and then use recursion or a bottoms up approach to combine the subproblem results to solve the original problem.  </p>



<p>Recursion lends itself nicely to DP as the program stack itself becomes the mechanism to generate, traverse and combine the subproblems, and memoization is used to prevent re-solving the same subproblem if there&#8217;s overlap.  </p>



<p>Let&#8217;s think about the classic recursive Fibonacci algorithm.  </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def fib_rec(n):
    if n&lt;2: return n
    return fib_rec(n-1) + fib_rec(n-2)</pre>



<p>The subproblems is calculating each number as the sum of the prior two.  We use the program stack to generate these nodes depth first, with the base cases being the numbers in positions 0 and 1.  Combing these sub-results is straightforward &#8211; we add them all the way back up the stack.  </p>



<p>Now we just have to optimise with memoization to prevent re-calculating nodes. </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def fib_dyn(n,memo={}):
    if n&lt;2: return n
    if len(memo)>n:
        return memo[n]
    else: 
        fibn = fib_dyn(n-1,memo) + fib_dyn(n-2,memo)
        memo[n] = fibn
        return fibn</pre>



<p>DP can also be done without recursion, via a bottoms up approach while adhering to the same principles.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def fib_bot_up(n):
    f=[]
    for k in range(n+1):
        if k&lt;2: f.append(k)
        else: f.append(f[k-1]+f[k-2])
    return f[k]</pre>



<p>You can see that in the bottoms up approach we start with the base cases, and move up the sub-results until we get to the desired position in the sequence.  We could optimize further by keeping track of only the prior two numbers in our loop.</p>



<p>Let&#8217;s think about another simple problem:  Let&#8217;s say you can climb a staircase of n steps by one or two or three steps at a time.  How many ways are there to get to the top?</p>



<p>First, let&#8217;s think about the subproblems.  We&#8217;ll call step zero as the top step &#8211; the base case.  Once I&#8217;m there, there&#8217;s only one way to climb the staircase. From any step, I can get to the top by adding the ways to get to the top from 1 step up, 2 steps up and 3 steps up from where I am.  Like the Fibonacci sequence, these subproblems can be nicely generated by the program stack using recursion.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def countways_rec(n):
    if n&lt;0: return 0
    if n==0: return 1
    return countways_rec(n-1)+countways_rec(n-2)+countways_rec(n-3)</pre>



<p>Now we add memoization:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def countways_dyn(n,memo={}):
    if n&lt;0: return 0 
    if n==0: return 1
    if len(memo)>n:
        return memo[n]
    else:
        return countways_dyn(n-1,memo)+countways_dyn(n-2,memo)+countways_dyn(n-3,memo)</pre>



<p>Now a bottoms up approach.  Again, we start with the base case and build up from there.  We can keep a lookup table to keep track of the previously calculated values that we&#8217;re building our final result on.  </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def countways_bottomsup(n):
    lookup = {}
    lookup[0]=1
    lookup[1]=1
    lookup[2]=2
    for step in range(3,n+1):
        lookup[step]=lookup[step-1]+lookup[step-2]+lookup[step-3]
    return lookup[n]</pre>



<p>These are the basic principles of all DP problems.  Figuring out the subproblems, and how to generate and combine them can get trickier in some problems.  I&#8217;ll explore some of these in subsequent posts. </p>



<p>For completeness, here&#8217;s a solution of the steps problem with a variable number of steps that can be jumped.  </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def countways_bottomsup_varjumps(n,jumps):
    lookup = {}
    lookup[0]=1
    for step in range(1,n+1):
        lookup[step]=0
        for jump in jumps:
            if step-jump >= 0: lookup[step]=lookup[step]+lookup[step-jump]
    return lookup[n]</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=dynamic-programming" rel="tag">Dynamic Programming</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=10101#comments">16 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-10101 -->

		
	

	
			<div id="post-514" class="post-514 post type-post status-publish format-standard hentry category-programming tag-monte-carlo tag-python">
			<h2 class="entry-title"><a href="/?p=514" rel="bookmark">A simple Monte Carlo simulation in Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=514" title="9:51 pm" rel="bookmark"><span class="entry-date">November 13, 2011</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Monte Carlo is a simulation method that can be useful in solving problems that are difficult to solve analytically.</p>



<p>Here&#8217;s an interesting application of the technique to estimate the value of pi. </p>



<p>Consider a circular dartboard placed against a square backing, with the sides of the square perfectly touching the circle tangentially at the top, bottom, left and right.</p>



<figure class="wp-block-image"><img decoding="async" width="219" height="219" src="http://localhost/wp-content/uploads/2011/11/circlesquare.jpeg" alt="" class="wp-image-515" srcset="/wp-content/uploads/2011/11/circlesquare.jpeg 219w, /wp-content/uploads/2011/11/circlesquare-150x150.jpg 150w" sizes="(max-width: 219px) 100vw, 219px"></figure>



<p>If you throw a dart blindly so it lands inside of the square, what are the chances the dart has landed inside the circle?</p>



<p>Given a circle radius of r, the chances are:</p>



<pre class="wp-block-code"><code>
= area of circle / area of square
= (pi * r ^ 2) / (4 * r ^ 2)
= pi / 4</code></pre>



<p>So the chances of hitting the circle are pi divided by 4. &nbsp; In other words:</p>



<p><strong>pi = 4 * the probability of hitting the circle.</strong></p>



<p>So we can set up a Monte Carlo simulation that will give us the probability of getting the dart inside of the circle, and then we&#8217;ll be able to derive an approximation of the value of pi.  </p>



<p>To do this, let&#8217;s think of the quarter circle below:</p>



<figure class="wp-block-image"><img fetchpriority="high" decoding="async" width="326" height="252" src="http://localhost/wp-content/uploads/2011/11/quartercirle.png" alt="" class="wp-image-516" srcset="/wp-content/uploads/2011/11/quartercirle.png 326w, /wp-content/uploads/2011/11/quartercirle-300x231.png 300w" sizes="(max-width: 326px) 100vw, 326px"></figure>



<p>Note that the chances of hitting the quarter circle inside of its square is the same as hitting the larger circle inside of the bigger square. &nbsp; </p>



<p>How can we easily simulate hitting the quarter circle? &nbsp;We can obtain two random numbers between &nbsp;0 and 1, representing the x and y coordinates of a point with the origin at the circle&#8217;s center. &nbsp;If the distance between this point and the origin is less than 1, then we&#8217;re inside the quarter circle. &nbsp;Otherwise we&#8217;re outside it. &nbsp;</p>



<p>If we simulate this enough times, and multiply the percentage of times we&#8217;re inside the circle by 4, we should converge on the value of pi. Here&#8217;s python shell code that simulates this:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">>>> from random import random
>>> len(filter(lambda x:(random()**2+random()**2)**.5&lt;1,range(1000000)))/1000000.0*4
3.14064</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=monte-carlo" rel="tag">monte carlo</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=514#comments">3 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-514 -->

		
	

	
			<div id="post-458" class="post-458 post type-post status-publish format-standard hentry category-programming tag-numpy tag-prime-numbers tag-python">
			<h2 class="entry-title"><a href="/?p=458" rel="bookmark">Generating prime numbers using Numpy</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=458" title="4:27 pm" rel="bookmark"><span class="entry-date">August 27, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>I&#8217;ve been looking at generating primes, and using various element-wise operations in Numpy arrays to do so.  To cut the the chase, prime6 below is the fastest implementation.  The ones before that tell the story of how I got there. </p>



<p>The following function uses a for loop to generate primes less than 100k and takes about 7 secs on my laptop:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
import math
def prime2(upto=100000):
    return filter(lambda num: numpy.array([num % factor for factor in range(2,1+int(math.sqrt(num)))]).all(), range(2,upto+1))</pre>



<p>If we remove the for loop we cut the time to about 1.3 secs:<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
import math
def prime(upto=100000):
    return filter(lambda num: (num % numpy.arange(2,1+int(math.sqrt(num)))).all(), range(2,upto+1))</pre>



<p>By not including even numbers, we can run in half the time again to about .7 secs:<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
import math
def prime3(upto=100000):
    return [2]+filter(lambda num: (num % numpy.arange(3,1+int(math.sqrt(num)),2)).all(), range(3,upto+1,2))
</pre>



<p>The above is illustrative of efficiencies in using element-wise operations in Numpy arrays rather than looping.</p>



<p>A good way of speeding up the above code even further is by breaking after finding the first modulo equal zero condition. The code below runs in about .4 seconds:<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
import math
def prime4(upto=100000):
    primes=[2]
    for num in range(3,upto+1,2):
        isprime=True
        for factor in range(3,1+int(math.sqrt(num)),2):
             if not num % factor: isprime=False; break
        if isprime: primes.append(num)
    return primes</pre>



<p>Ok Scruffy Pete has laid down the challenge in the comments section so I need to get serious about optimization. The code below uses a few Numpy tricks for a zippy implementation and generates 1 million primes in about .03 secs, about 6X faster than Scruffy Pete&#8217;s.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import math
import numpy
def prime5(upto=100000):
    primes=numpy.arange(2,upto+1)
    isprime=numpy.ones(upto-1,dtype=bool)
    for factor in primes[:int(math.sqrt(upto))]:
        if isprime[factor-2]: isprime[factor*2-2::factor]=0
    return primes[isprime]</pre>



<p>UPDATE 9/3 &#8211; did a half sieve style implementation of the above (see comments) which runs a little faster &#8211; under .02 secs for primes up to 1 million.  <strong>Updated for Python 3</strong> and incorporating suggestion in comments from  <strong>Paul Weemaes</strong> <br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import math
import numpy
def prime6(upto=1000000):
    primes=numpy.arange(3,upto+1,2)
    isprime=numpy.ones((upto-1)//2,dtype=bool)
    for factor in primes[:int(math.sqrt(upto))//2]:
        if isprime[(factor-2)//2]: isprime[(factor*3-2)//2::factor]=0
    return numpy.insert(primes[isprime],0,2)</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=numpy" rel="tag">numpy</a>, <a href="/?tag=prime-numbers" rel="tag">prime numbers</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=458#comments">12 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-458 -->

		
	

	
			<div id="post-431" class="post-431 post type-post status-publish format-standard hentry category-programming tag-numpy tag-probability tag-python tag-simulations">
			<h2 class="entry-title"><a href="/?p=431" rel="bookmark">Birthday simulations using Python and Numpy</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=431" title="11:38 pm" rel="bookmark"><span class="entry-date">August 26, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>I&#8217;ve written <a href="/?p=317">previously</a> about the probability of finding a shared birthday in a room full of people.  I wanted to run some simulations on this using Python.  As an aside, you&#8217;ll find some of the techniques below bear a similarity to that old interview question of finding if a list has duplicate elements. </p>



<p>The following code generates birthday samples for a given number of people, then works out the proportion of these samples that contain at least one shared birthday:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
def sharedbday1(people,simulations=50000):
    samples = numpy.random.random_integers(0,365, size=(simulations, people))
    hasnoshared=map(lambda x: len(x)==len(set(x)),samples)
    return 1-float(sum(hasnoshared))/simulations</pre>



<p>Timing this in IPython on my laptop for 50k simulations takes about .5 secs to run.  For 23 people, it returns the expected result of around .5.  As we saw in a previous post on this blog, it takes 23 people in a room to have at least a 50% chance of a shared birthday. </p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">In [579]: time sharedbday1(23)
CPU times: user 0.56 s, sys: 0.00 s, total: 0.56 s
Wall time: 0.56 s
Out[580]: 0.50678000000000001</pre>



<p><br>Since we love Numpy, it&#8217;s likely we&#8217;ll have a cleverer and faster way of doing this. We can sort the array, then compare it element-wise against a slice of itself offset by one &#8211; and if we find any equivalent elements we&#8217;ve found a sample with a shared birthday. With Numpy arrays this is achieved very neatly as operations in Numpy are performed element-wise by default:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
def sharedbday2(people, simulations=50000):
    samples = numpy.random.random_integers(0,365, size=(simulations, people))
    samples.sort()
    hasshared = ((sample[1:]==sample[:-1]).any() for sample in samples)
    return float(sum(hasshared))/simulations</pre>



<p>Well, unfortunately and somewhat surprisingly, this runs twice as slow as the original code:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">In [582]: time sharedbday2(23)
CPU times: user 1.01 s, sys: 0.00 s, total: 1.01 s
Wall time: 1.02 s
Out[583]: 0.50988</pre>



<p><br>I exchanged some emails with Travis Oliphant of Numpy fame, who suggested the following code which is really neat and worth spending time to understand &#8211; I think it shows off the real power of Numpy:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
def sharedbday3(people, simulations=50000):
    samples = numpy.random.random_integers(0,365, size=(simulations, people))
    samples.sort(axis=-1)
    hasshared = (samples[:,1:] == samples[:,:-1]).any(axis=-1)
    return float(sum(hasshared))/simulations</pre>



<p>This is fast and shows a speed-up of least 5X on my original code &#8211; with a wall time of .09s:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">In [585]: time sharedbday3(23)
CPU times: user 0.10 s, sys: 0.00 s, total: 0.10 s
Wall time: 0.09 s
Out[586]: 0.50119999999999998</pre>



<p>As Travis explains it:<br><em> You create a 2-d array up-front with the simulations along one axis (i.e. every row of the 2-d array is a separate simulation). Then you can use the sample approach used above, but this time letting NumPy do the loop over the rows (down in C). The sort and any methods on NumPy arrays take an axis keyword which determines the dimension over which the operation works. The operation is then repeated implicitly over the other dimensions. So, in the 3rd version shared birthday there are no for loops. The penalty paid is memory usage: a 2-d array instead of throw-away 1-d arrays. But, of course, less memory management is also a major reason for the speed gain. </em></p>



<p><br>For completeness, I made some minor modifications to the original code above to simulate the probability that at least one person in a group shares your birthday (rather than of finding a shared birthday between them).</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import numpy
def sharemybday(people,simulations=50000):
    mybday=0
    samples = numpy.random.random_integers(0,365, size=(simulations, people))
    hasshared=map(lambda x: mybday in x,samples)
    return float(sum(hasshared))/simulations</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">In [1509]: sharemybday(253)
Out[1509]: 0.50431999999999999</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=numpy" rel="tag">numpy</a>, <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=python" rel="tag">python</a>, <a href="/?tag=simulations" rel="tag">simulations</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=431#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-431 -->

		
	

	
			<div id="post-392" class="post-392 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-graphs tag-python tag-shortest-path">
			<h2 class="entry-title"><a href="/?p=392" rel="bookmark">Dijkstra Shortest Path using Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=392" title="2:26 pm" rel="bookmark"><span class="entry-date">August 24, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>This post uses python and <a href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra&#8217;s algorithm</a> to calculate the shortest path given a start node (or vertex), an end node and a graph. The function will return the distance from the start node to the end node, as well as the path taken to get there.</p>



<p>The implementation below sticks pretty closely to the algorithm description in the wikipedia entry, which I turned into something a little more pseudo-code-ish to help me implement it:</p>



<h4 class="wp-block-heading">Initial state:</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="raw" data-enlighter-theme="wpcustom" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">1. give nodes two properties - node.visited and node.distance
2. set node.distance = infinity for all nodes except set start node to zero
3. set node.visited = false for all nodes
4. set current node = start node.</pre>



<h4 class="wp-block-heading">Current node loop:</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="raw" data-enlighter-theme="wpcustom" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">1. if current node = end node, finish and return current.distance &amp; path
2. for all unvisited neighbors, calc their tentative distance (current.distance + edge to neighbor).
3. if tentative distance &lt; neighbor's set distance, overwrite it.
4. set current.isvisited = true.
5. set current = remaining unvisited node with smallest node.distance</pre>



<p>Here&#8217;s my implementation &#8211; it&#8217;s recursive, as suggested by the algorithm description:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import sys
def shortestpath(graph,start,end,visited=[],distances={},predecessors={}):
    """Find the shortest path btw start &amp; end nodes in a graph"""
    # detect if first time through, set current distance to zero
    if not visited: distances[start]=0
    # if we've found our end node, find the path to it, and return
    if start==end:
        path=[]
        while end != None:
            path.append(end)
            end=predecessors.get(end,None)
        return distances[start], path[::-1]
    # process neighbors as per algorithm, keep track of predecessors
    for neighbor in graph[start]:
        if neighbor not in visited:
            neighbordist = distances.get(neighbor,sys.maxint)
            tentativedist = distances[start] + graph[start][neighbor]
            if tentativedist &lt; neighbordist:
                distances[neighbor] = tentativedist
                predecessors[neighbor]=start
    # neighbors processed, now mark the current node as visited 
    visited.append(start)
    # finds the closest unvisited node to the start 
    unvisiteds = dict((k, distances.get(k,sys.maxint)) for k in graph if k not in visited)
    closestnode = min(unvisiteds, key=unvisiteds.get)
    # now take the closest node and recurse, making it current 
    return shortestpath(graph,closestnode,end,visited,distances,predecessors)

graph = {'a': {'w': 14, 'x': 7, 'y': 9},
        'b': {'w': 9, 'z': 6},
        'w': {'a': 14, 'b': 9, 'y': 2},
        'x': {'a': 7, 'y': 10, 'z': 15},
        'y': {'a': 9, 'w': 2, 'x': 10, 'z': 11},
        'z': {'b': 6, 'x': 15, 'y': 11}}
print shortestpath(graph,'a','a')
print shortestpath(graph,'a','b')
print "\nExpected Result:\n(0, ['a'])\n(20, ['a', 'y', 'w', 'b'])"</pre>



<p>As you can see I turned the example in wikipedia into a graph for the test case in the code above:</p>



<figure class="wp-block-image"><img decoding="async" width="283" height="222" src="/wp-content/uploads/2020/04/Dijkstra_Animation.gif" alt="" class="wp-image-10143"></figure>



<p>I also found this useful about how to represent and process graphs in python: <a href="http://ftp.ntua.gr/mirror/python/doc/essays/graphs.html">http://ftp.ntua.gr/mirror/python/doc/essays/graphs.html</a>. I think this was written by Guido himself.</p>



<p>There&#8217;s a bunch of interesting implementations on the web, including two <a href="http://code.activestate.com/recipes/119466/">here</a>.  Faster and more elegant perhaps, but it took me a little longer to understand them.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=graphs" rel="tag">graphs</a>, <a href="/?tag=python" rel="tag">python</a>, <a href="/?tag=shortest-path" rel="tag">shortest path</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=392#comments">7 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-392 -->

		
	

	
			<div id="post-366" class="post-366 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-interview-questions tag-linked-lists tag-python">
			<h2 class="entry-title"><a href="/?p=366" rel="bookmark">Cyclic Linked List &#8211; finding the start of the loop using Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=366" title="11:01 pm" rel="bookmark"><span class="entry-date">July 18, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>I&#8217;d blogged <a href="/?p=14">previously </a>about writing a python function to find out whether a linked list is cyclic or acyclic &#8211; it&#8217;s worth a read before tackling this one.</p>



<p>The challenge here is to return the node that is at the start of the loop given the head node of a cyclic linked list.   </p>



<p>A cyclic linked list would look something like this:</p>



<p>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;C</p>



<p>In the case above, A is the head node, and C is the node at the start of the loop.</p>



<p><strong>Solution</strong></p>



<p>Let&#8217;s call <i>x</i> the distance from the head to the start of the loop, and <i>c</i> the number of nodes in the loop.</p>



<p>We kick off a fast and a slow pointer from the head, with the fast pointer going twice as fast as the slow pointer (skipping every other node). By the time the slow pointer gets to the start of the loop, the fast pointer will have a head start of <i>x</i> (the fast pointer is always the same distance from the slow pointer as the slow pointer is from the head).</p>



<p>Given its head start of <i>x</i>, when will the fast pointer catch up to the slow pointer? The fast pointer always needs twice the initial distance from the slow pointer to catch up. Moving forward in the loop, the fast pointer is <i>c-x</i> nodes from the slow pointer, so it needs <i>2(c-x)</i> nodes to catch up. In that time, the slow pointer will have managed to move <i>c-x</i> nodes away from the start (half what the fast pointer travelled).</p>



<p>The key thing to note here is that both pointers are now <i>x</i> nodes away from the start of the loop looking in a forwards direction. So you&#8217;ll see that to find the start of the loop the code below gets the fast and slow pointer to meet in the loop, then walks the slow pointer forward <i>x</i> nodes &#8211; the distance from the head to the start.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def startOfCyclicLoop(head):

    """
    >>> e1=Element(1)
    >>> e2=Element(2)
    >>> e3=Element(3)
    >>> e4=Element(4)
    >>> e5=Element(5)
    >>> e1.next=e2
    >>> print startOfCyclicLoop(e1)
    None
    >>> e2.next=e3
    >>> e3.next=e4
    >>> e4.next=e5
    >>> print startOfCyclicLoop(e1)
    None
    >>> e5.next=e3
    >>> print startOfCyclicLoop(e1)
    3
    >>> e5.next=e4
    >>> print startOfCyclicLoop(e1)
    4
    >>> e5.next=e2
    >>> print startOfCyclicLoop(e1)
    2
    """

    slow=head
    fast=head
    while fast!=None and fast.next!=None:
        slow=slow.next
        fast=fast.next.next
        if (fast==slow):
            slow=head
            while (fast!=slow):
                slow=slow.next
                fast=fast.next
            return fast
    return None

class Element:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next
    def __str__(self):
        return str(self.data)

if __name__ == "__main__":
    import doctest
    doctest.testmod()</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=linked-lists" rel="tag">linked lists</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=366#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-366 -->

		
	

	
			<div id="post-337" class="post-337 post type-post status-publish format-standard hentry category-programming tag-anagrams tag-programming tag-python">
			<h2 class="entry-title"><a href="/?p=337" rel="bookmark">Anagrams using Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=337" title="11:56 pm" rel="bookmark"><span class="entry-date">June 4, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Python can be an elegant language.  This is an example &#8211; a Python function that finds the anagrams for a supplied word. For the word dictionary I found one in OS X at <em>/usr/share/dict/words</em>. </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def anagrams(wordIn):
    f=open('/usr/share/dict/words')                                                                                                                                                                                 
    ana=dict()
    for word in f.readlines():
        ana.setdefault(''.join(sorted(word.rstrip())),[]).append(word.rstrip())
    return ana.get(''.join(sorted(wordIn)))
</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">>>> anagrams("cat")
['act', 'cat']
>>> </pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=anagrams" rel="tag">anagrams</a>, <a href="/?tag=programming" rel="tag">programming</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=337#comments">2 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-337 -->

		
	

	
			<div id="post-317" class="post-317 post type-post status-publish format-standard hentry category-puzzles tag-birthday-pairings tag-logarithms tag-probability tag-stirlings-approximation">
			<h2 class="entry-title"><a href="/?p=317" rel="bookmark">Birthday pairings</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=317" title="2:20 pm" rel="bookmark"><span class="entry-date">April 30, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Here&#8217;s two classic birthday puzzles:</p>



<ol class="wp-block-list">
<li>How many people do you need in a room to have a better than 50% chance of finding at least one shared birthday among them?</li>
<li>How many people do you need in a room with you to have a better than 50% chance of finding someone who shares your birthday?</li>
</ol>



<p>Finding a solution to these is conceptually quite straightforward, but also quite instructive on various useful probabilistic calculation techniques. </p>



<p>Let&#8217;s take these one at a time. </p>



<ol class="wp-block-list"><li><strong>How many people do you need in a room to have a better than 50% chance of finding at least one shared birthday among them?</strong></li></ol>



<p>Like a lot of these kinds of problems, it can be easier to first find the chances of the proposition not happening. In this case, finding the chances of <em>not</em> finding a shared birthday.</p>



<p>I have a tendency to think of card decks in these situation &#8211; so in this case I think of having a bunch of 365-card decks. I deal one card from each deck. What are the chances that I haven&#8217;t dealt the same card after after dealing from r decks? You can see that this is an analogy for our problem. Looking back at the previous post on <a href="/?p=293">dealing a perfect hand</a> may be a good primer for what follows.</p>



<p>The answer to our card analogy is to take the number of ways I can deal the cards (one from each deck) and get no duplicates divided by the total number of ways I can deal the cards. </p>



<p>From the first deck, I have 365 ways to deal one card. From the second deck, I have 364 ways to deal one card and not have duplicates. From the third deck, there are 363 ways, and so on until I get to <em>365-r+1</em> ways. So the number of ways I can deal cards without duplicates is:</p>



<pre class="wp-block-code"><code>= 365 * 364 * ... * (365-r+1)
= 365! / (365-r)!</code></pre>



<p>Now lets work out how many ways there are to deal the cards without restrictions. The answer is simply:</p>



<pre class="wp-block-code"><code>= 365 ^ r</code></pre>



<p>So now, the probability of not dealing any duplicate cards (and also the chances of not finding anyone with a shared birthday) is:</p>



<pre class="wp-block-code"><code>= (365! / (365-r)!) / (365 ^ r)</code></pre>



<p>I was a little stumped at how to solve this as 365! will make any calculator blow up. But we can use <a href="http://en.wikipedia.org/wiki/Stirling%27s_approximation" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Sterling&#8217;s approximation</a> to find that:</p>



<pre class="wp-block-code"><code>ln(365!) = 1792.33142
ln((365-22)!) = 1663.17935
ln((365-23)!) = 1657.34162</code></pre>



<p>So for r=22, our probability of no shared birthdays:</p>



<pre class="wp-block-code"><code>= e ^ (1 792.33142 - 1 663.17935) / (365 ^ 22) 
= 0.524310203</code></pre>



<p>For r=23:</p>



<pre class="wp-block-code"><code>= e ^ (1792.33142 - 1657.34162) / (365 ^ 23) 
= 0.492707724</code></pre>



<p>Now remember that this is for finding no shared birthdays. To have at least 1 shared birthday, we need to subract from 1.</p>



<p>So for r=22, the chances of finding at least 1 shared birthday are:</p>



<pre class="wp-block-code"><code>= 1 - 0.524310203 
= 0.475689797</code></pre>



<p>For r=23, the chances are:</p>



<pre class="wp-block-code"><code>= 1 - 0.492707724 
= 0.507292276</code></pre>



<p>So you can see that it takes at least 23 people in a room to have a greater than 50/50 chance of finding a shared birthday.</p>



<p>By the way, to get the Stirling approximation of ln(365!) I typed the following into google:</p>



<pre class="wp-block-code"><code>365 * ln(365) - (365) + ln(365)/2 + ln (2*pi) / 2)</code></pre>



<p>Ok so let&#8217;s move on to our second problem: </p>



<p>2. <strong>How many people do you need in a room with you to have a better than 50% chance of finding someone who shares your birthday?</strong></p>



<p>This one&#8217;s a little simpler than the first. Again, it&#8217;s easier to first find the probability of no one having your birthday. Let&#8217;s imagine people walking in to a room where you are. The first person has a <em>364/365</em> chance of not having your birthday. And it&#8217;s the same for all subsequent people who walk into the room. So the chances of no one sharing your birthday after <em>r</em> people have walked in are:</p>



<pre class="wp-block-code"><code>= (364/365)^r</code></pre>



<p>So the chance that at least one person shares your birthday is:</p>



<pre class="wp-block-code"><code>= 1 - (364/365) ^ r</code></pre>



<p>Let&#8217;s find r when the equation is 1/2, representing the at least 50% chance we were looking for:</p>



<pre class="wp-block-code"><code>1/2 = 1 - (364/365) ^ r
(364/365) ^ r = 1/2
r * log (364/365) = log (1/2)
r = log (1/2) / log (364/365)
r = 252.651989</code></pre>



<p>So you need to have at least 253 people with you in a room to have a better than 50/50 chance of finding someone sharing your birthday. It&#8217;s quite amazing how different this answer is to the answer for the first part.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=birthday-pairings" rel="tag">birthday pairings</a>, <a href="/?tag=logarithms" rel="tag">logarithms</a>, <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=stirlings-approximation" rel="tag">stirling's approximation</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=317#comments">1 Comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-317 -->

		
	

	
			<div id="post-293" class="post-293 post type-post status-publish format-standard hentry category-puzzles tag-permutations tag-probability">
			<h2 class="entry-title"><a href="/?p=293" rel="bookmark">A perfect hand, with some combinatorial tricks</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=293" title="2:32 pm" rel="bookmark"><span class="entry-date">April 29, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p><strong>Question: You deal the first 13 cards from a well shuffled, 52-card deck. What are the chances the 13 cards you deal are of the same suit?</strong></p>



<p>There&#8217;s a couple of ways to do this &#8211; both incorporate useful techniques for solving these kind of problems.</p>



<p><strong>First Answer &#8211; simple probability</strong></p>



<p>The first way is just to look at the first 13 cards dealt and work out how many ways there are to deal a single-suit hand, and divide this by the number of ways there are to deal any hand.</p>



<p>There are 52 ways you can deal a first card. There are then 12 ways you can deal a second card if we restrict it to the suit of the first card. So we now have <em>52 * 12</em> permutations. With the third card, we&#8217;re up to <em>52 * 12 * 11</em> permutations. So we can see that the ways to deal a single-suit 13 card hand is: </p>



<pre class="wp-block-code"><code>= 52 * 12!</code></pre>



<p>Using the same logic, we can see that:</p>



<p>Ways to deal any 13 card hand <em>= 52 * 51 * 50 * &#8230; * 40</em>. This equals:</p>



<pre class="wp-block-code"><code>= 52! / 39!</code></pre>



<p> (Hopefully this is clear &#8211; the remaining sequence to finish making 52! is 39!).</p>



<p>So the probability of dealing a single-suit 13 card hand: </p>



<pre class="wp-block-code"><code>= (52 * 12!) / (52! / 39!) 
= 12! * 39! / 51!</code></pre>



<p>Is there a way to work this out without blowing up our calculator? We can go old school and get out our factorial log tables.</p>



<p>The log of the answer equals the log of <em>(12! * 39! / 51!)</em>. If you remember your log rules, this is the same as l<em>og(12!) + log (39!) &#8211; log(51!)</em>. If you don&#8217;t have log of factorial tables you can type that equation into google and it magically gives you the answer. So you get:</p>



<pre class="wp-block-code"><code>= log(12!) + log (39!) - log(51!) 
= -11.200723</code></pre>



<p>So the log of the probability is -11.200723. Now let&#8217;s take the antilog to get our answer:</p>



<pre class="wp-block-code"><code>= 10 ^ -11.200723
= 6.299078 * 10 ^ -12</code></pre>



<p>This is the probability of dealing a perfect deck. Take the reciprocal to get the odds to 1 against:</p>



<pre class="wp-block-code"><code>1 in 158,753,387,100</code></pre>



<p>Holy cow &#8211; that&#8217;s what in Australia we call between Buckley&#8217;s and none.</p>



<p><strong>Second Answer &#8211; let&#8217;s use some combinatorial tricks!</strong></p>



<p>The first thing you have to know is: if I have a group of things of size <em>n</em>, how many ways are there to select a subset of size <em>r</em>? The anser is: <em>n! / (r! * (n &#8211; r)!)</em>. </p>



<p>So for example if I had 5 balls, I could arrange 2 balls out of the 5 in: <em>5! / (2! * 3!) = 15</em> ways.</p>



<p>As a side note &#8211; and I cover this more at the end of this post &#8211; I&#8217;m treating this as an order doesn&#8217;t matter, repetitions not allowed arrangement.</p>



<p>How does this help us in this problem? Let&#8217;s think of the number of ways that I can select 13 cards from this deck. The order in which the cards are selected doesn&#8217;t matter. The answer, following our example above would be <em>52! / (13! * 39!)</em>. Out of all of these possibilities, how many of these give us 13 cards a particular chosen suit? The answer is only 1. The reason is that there&#8217;s only 13 cards of the chosen suit, and the arrangement I&#8217;m looking for has all of them. And since order doesn&#8217;t matter, there&#8217;s only one arrangement that has all of these 13 particular cards.</p>



<p>So dividing the number of arrangements with 13 cards being our chosen suit by the total number of arrangements gives us: <em>1 / (52! / (13! * 39!))</em></p>



<p>Now we have to multiply this by 4, as we have 4 suits.</p>



<pre class="wp-block-code"><code>= 4 * 1 / (52! / (13! * 39!))
= 4 * 13! * 39! / 52!</code></pre>



<p>We can see that this becomes our original answer above:</p>



<pre class="wp-block-code"><code>12! * 39! / 51!</code></pre>



<p><strong>Some useful combinatorial definitions</strong></p>



<p>It&#8217;s probably a good idea at this point to formalize a little the definitions of permutations and combinations.</p>



<p>Permutations are when the order of the arrangement does matter &#8211; the order is a factor in making the arrangement unique.</p>



<p>Combinations are when we want to get the number of arrangements without regard to order. So we can treat the arrangements as buckets we can shake up and it&#8217;s still the same arrangement.</p>



<p>Within these, we can also allow repetitions or not. In other words, in a given arrangement, can a particular item be used more than once?</p>



<p>Some examples will help:</p>



<p><strong>Combinations</strong></p>



<p><em>Repetitions allowed:</em> Let&#8217;s say you&#8217;re ordering a sandwich at Subway and can choose 3 meats out of a possible 5. If you love salami, you could chose salami, salami and salami for your meats. And we don&#8217;t really care what order we get the meats in the sandwich &#8211; for example, bologna, salami, bologna is the same as salami, bologna, bologna.<br></p>



<p><em>No Repetitions:</em> Let&#8217;s say Subway had only one of each of the meats left &#8211; so you couldn&#8217;t choose the same meat twice. Another good example is a lottery where you need to match 6 numbers drawn from a pool of 40. Once a number is drawn it doesn&#8217;t go back in to the pool.</p>



<p><strong>Permutations</strong></p>



<p><em>Repetitions:</em> the classic example is that of a combination lock (which should really be called a permutation lock!). Order does matter, and repetitions are allowed as your combination could be 7777.</p>



<p><br><em>No Repetitions:</em> How many ways are there to get the first 3 positions in a 100 person race? Order matters, and you can&#8217;t have the same person in more than one position.</p>



<p><strong>The formulas:</strong></p>



<p>Permutation, repetition: n ^ r<br>Permutation, no repetition: n! / (n-r)!<br>Combination, repetition: (n + r &#8211; 1)! / (r! * (n &#8211; 1)!)<br>Combination, no repetition: n! / (r! * (n-r)!)</p>



<p>It&#8217;s interesting to note that in the above, the combination no repetition case is just the permutation no repetition case divided by r!. You can see this by thinking that for arrangements with 3 elements, there will be 3! more ways to arrange them if we care about order as in the permutation case than in the combination case.</p>



<p>The combination no repetition case is probably the most common and comes up in card-dealing problems and the like. It is sometimes called the &#8220;n choose r&#8221; case &#8211; or nCr, and also known as the &#8220;Binomial Coefficient&#8221;.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=permutations" rel="tag">permutations</a>, <a href="/?tag=probability" rel="tag">probability</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=293#comments">1 Comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-293 -->

		
	

	
			<div id="post-215" class="post-215 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions">
			<h2 class="entry-title"><a href="/?p=215" rel="bookmark">Puzzle &#8211; A safe place to drop an egg</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=215" title="4:31 pm" rel="bookmark"><span class="entry-date">April 11, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>This is a problem where it&#8217;s fairly easy to find the solution via trial and error, but not so easy to generalize.</p>
<p><strong>Question</strong></p>
<p>Let&#8217;s say you need to find out the highest floor in a 100 story building from which you could safely drop an egg without it breaking. What&#8217;s your strategy to minimize the worst case number of drops you have to try?</p>
<p>If you just had one egg with which to conduct your experiment, you&#8217;d have to start at floor one, and go up floor by floor looking for the first floor at which your egg broke until you reached floor 100. So your maximum number of drops would be 100.</p>
<p>What would be the worst case number of drops if you could use two eggs?</p>
<p><strong>Answer</strong></p>
<p>With two eggs you can be cleverer, and drop the first egg at floor 50, and effectively divide the floor space in half for your second egg.</p>
<p>You could also drop the first egg at floor 10, then assuming it doesn&#8217;t break, floor 20, 30, and so on. As soon as it broke, you&#8217;d try the 9 floors underneath with your second egg. So worst case if you get all the way to floor 100 before it breaks, then start at floor 91 with the second egg and get all the way to floor 99, then the total worst case drops is 19.</p>
<p>Can we do better?</p>
<p>Picking 10 as number of floors to skip with the first egg is not particularly efficient in dividing the floor space because if the first egg breaks on floor 10, the worst case is 10. But if the first egg breaks on floor 20, then the worst case is 11. As we saw, by the time you get to floor 100 your worst case is 19. The most efficient solution will be when no matter where the first egg breaks, our worst case stays the same.</p>
<p>To do that we could say that we&#8217;ll start with our first egg at floor 10, but the second drop will be on floor 19, preserving our 10 drop worst case. The problem you&#8217;ll find is that you end up reducing the spacing to 1 before you get anywhere close to floor 100. By trial and error you can find the best number to start with, and it turns out to be 14, giving us a 14 drop worst case:</p>
<p>14, 27, 39, 50, 60, 69, 77, 84, 90, 95, 99, 100.</p>
<p><strong>Generalization</strong></p>
<p>Is there a formula we can use to work this out, so we could do it for any number of floors?</p>
<p>Let&#8217;s look at the number of floors we skip at each turn:</p>
<p>n, n-1, n-2, n-3 &#8230; 1</p>
<p>Flipping that around, we have:</p>
<p>1, 2, 3, 4&#8230;.. n.</p>
<p>We also know that the sum of the number of floors skipped will equal the total number of floors.</p>
<p>We know that the sum of a sequence like the above is (n+1) * n/2. You can see this if you pair the first and last numbers, the the second and second to last, etc.</p>
<p>So if we say h is the total number of floors in the building, we have:</p>
<p>h = (n+1) * n/2</p>
<p>So:</p>
<p>n^2 + n = 2h.</p>
<p>To solve for n, let&#8217;s use the completing the square trick:</p>
<p>n^2 + n + .25 = 2h + .25<br>
(n+.5)(n+.5) = 2h + .25<br>
n+.5 = sqrt (2h+.25)<br>
n = sqrt(2h+.25) &#8211; .5</p>
<p>If we try this on our 100 floor problem, we get:</p>
<p>n = sqrt(200.25)-.5<br>
n=13.65</p>
<p>So seeing as we need integer floors, we need 14 floors, which corresponds with our trial and error result.</p>
<p>I have to give props to Scruffy Pete for helping out on this one.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=215#comments">1 Comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-215 -->

		
	

	
			<div id="post-181" class="post-181 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-probability">
			<h2 class="entry-title"><a href="/?p=181" rel="bookmark">Alternating coin toss &#8211; redux</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=181" title="4:01 pm" rel="bookmark"><span class="entry-date">April 10, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>I want to revisit a probability puzzle from a previous post: see <a href="/?p=10052">Alternating coin toss game.</a></p>
<p>You play a game where you alternate tossing a coin with a friend, and the first person to toss heads wins. But let&#8217;s make it a little more interesting by making the coin weighted, or biased, so that it lands heads only 25% of the time. If you were to start, what would be your chances of winning?</p>
<p>Let&#8217;s call the probability of tossing heads <span class="wp-katex-eq" data-display="false">p</span> and the probability of tossing tails <span class="wp-katex-eq" data-display="false">q</span>.</p>
<p>On the starter&#8217;s first toss, his chances of tossing heads are <span class="wp-katex-eq" data-display="false">p</span>. The chances he&#8217;ll toss heads on his second toss are <span class="wp-katex-eq" data-display="false">q^2\times p</span>. On his 4th toss it&#8217;s <span class="wp-katex-eq" data-display="false">q^4\times p</span> and so on.</p>
<p>So his chances of winning the game is the sum <span class="wp-katex-eq" data-display="false">s</span> of the geometric progression <span class="wp-katex-eq" data-display="false">p\times q^0\;+\;p\times q^2\;+\;p\times q^4\;+</span>&#8230;</p>
<p>Let&#8217;s use the shifting approach to solve this. The idea is to subtract out the first element, and then shift the rest of the elements to the left. So first subtract:<br>
<span class="wp-katex-eq" data-display="false">s-p\times q^0=p\times q^2\;+\;p\times q^4\;+</span>&#8230;</p>
<p>Now to shift the terms to the left, we need to divide by <span class="wp-katex-eq" data-display="false">q^2</span><br>
<span class="wp-katex-eq" data-display="false">\frac{s-p\times q^0}{q^2}=p\times q^0\;+\;p\times q^2\;+</span>&#8230;</p>
<p>So&#8230;<br>
<span class="wp-katex-eq" data-display="false">\frac{s-p\times q^0}{q^2}=s</span><br>
<span class="wp-katex-eq" data-display="false">s=\frac{p}{1-q^2}</span></p>
<p>This gives us a general solution to the alternating coin toss problem. If we plug in the unweighted coin probabilities, we get <span class="wp-katex-eq" data-display="false">s=\frac{2}{3}</span> which is what we&#8217;d worked out before. For the case where the probability of tossing a head is 1/4, then we get <span class="wp-katex-eq" data-display="false">s=\frac{4}{7}</span>, which is the probability of winning for the starter.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=probability" rel="tag">probability</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=181#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-181 -->

		
	

	
			<div id="post-167" class="post-167 post type-post status-publish format-standard hentry category-puzzles tag-probability tag-puzzle">
			<h2 class="entry-title"><a href="/?p=167" rel="bookmark">Puzzle &#8211; Take your seats</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=167" title="1:22 am" rel="bookmark"><span class="entry-date">April 7, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>Another problem that has an immediate intuitive answer, but can be tricky if you don&#8217;t have that insight.</p>
<p><strong>Question</strong></p>
<p>Let&#8217;s say there are 100 people, including you, waiting to board a fully booked flight, each with an assigned seat. The first person to board has seat #1 assigned but doesn&#8217;t pay any attention to this and sits somewhere at random. Each of the subsequent people will sit in their assigned seat if they can, but if they find someone sitting there will pick another seat at random. You&#8217;re the last to board with seat #100 assigned. What&#8217;s the probability you&#8217;ll get to sit in your assigned seat?</p>
<p><strong>Answer</strong></p>
<p>OK so if you&#8217;re really smart you may be starting to toy with conditional probability.</p>
<p>But an insight that can solve this quickly is that as soon as anyone sits in seat #1, I&#8217;ll be guaranteed my seat. Conversely, as soon as anyone sits in seat #100, my seat is eliminated and I won&#8217;t get to sit on it.  In other words, there will be one passenger that seals my fate, and all other passengers are irrelevant.</p>
<p>The passenger that sealed my fate had a 50/50 chance of either guaranteeing or eliminating my seat.  That applies for passenger #1, who had a 1/100 chance of choosing his own seat #1, and a 1/100 chance of choosing my seat #100.  If he&#8217;s the one that gets to seal my fate, it&#8217;s 50/50 which way he&#8217;ll do it.  If it gets to passenger #99 without my fate being sealed, #99 will have the pleasure of definitely doing so with only seats #1 and #100 left, which he&#8217;ll choose at random as neither is his.</p>
<p>So you can see that the chance you get to sit on your own seat is 50/50, because the passenger that sealed your fate had a 50/50 chance of doing it either way and all other passengers who chose seats other than #1 or #100 are irrelevant.  And your fate will be definitely be sealed somewhere between passenger #1 and #99.</p>
<p>Anybody have a different way to get the answer &#8211; or can get the answer by looking at the sum of conditional probabilities?</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=puzzle" rel="tag">puzzle</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=167#comments">2 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-167 -->

		
	

	
			<div id="post-146" class="post-146 post type-post status-publish format-standard hentry category-mathematics category-puzzles tag-geometric-progressions tag-puzzles">
			<h2 class="entry-title"><a href="/?p=146" rel="bookmark">Puzzle &#8211; Leaning Tower of Pisa</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=146" title="10:55 pm" rel="bookmark"><span class="entry-date">April 2, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Let&#8217;s say you drop a ball from the Leaning Tower of Pisa, which is 179 ft high, and it bounces back 10% of the dropped height &#8211; 17.9 ft. Then on the second bounce it bounces up 10% again &#8211; 1.79 ft, and so on for ever. How far will the ball travel?</p>



<p>The first thing to realize is that this is a geometric progression which will yield a finite sum, even though it has an infinite number of terms. This idea of finite sums is the reason Zeno can walk across the room: <a href="http://en.wikipedia.org/wiki/Geometric_series#Zeno.27s_paradoxes">http://en.wikipedia.org/wiki/Geometric_series#Zeno.27s_paradoxes</a>.</p>



<p>Before answering the question it may be useful to recap geometric progressions from my previous post <a href="/?p=10052">see the coin-toss puzzle answer.</a></p>



<p>In this tower problem, the total distance travelled by the ball will be: 179 + 179 * 2 * (1/10 + 1/100 + 1/1000&#8230;)</p>



<p>You may be able to see straight away that the sum of the progression is 1/9, and so the total distance 218 + 7/9.</p>



<p>But let&#8217;s do it using the standard approach:</p>



<p>Given that n in the progression will start at 1, we need to get our progression into the form:</p>


<span class="wp-katex-eq" data-display="false">\sum_{n=1}^\infty cr^{n-1} = \frac{c}{1-r}</span>



<p></p>



<p>When we do this, we get the same answer as above:</p>


<span class="wp-katex-eq" data-display="false">distance =\;179\;+\;179\;*\;2\;*\;1/10\;*\;\frac{1}{1-\frac{1}{10}}\;=\;218\;\frac{7}{9}</span>



<p></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=13" rel="category">mathematics</a>, <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=geometric-progressions" rel="tag">geometric progressions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=146#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-146 -->

		
	

	
			<div id="post-127" class="post-127 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-puzzles">
			<h2 class="entry-title"><a href="/?p=127" rel="bookmark">Puzzle &#8211; Break a stick to get a triangle</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=127" title="9:26 pm" rel="bookmark"><span class="entry-date">April 2, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>I read somewhere this is a Google interview question:</p>
<p><strong>Let&#8217;s say you drop a stick, breaking it randomly in 2 places, leaving you with 3 smaller sticks.   What&#8217;s the probability you can make a triangle out of the 3 resulting sticks?</strong></p>
<p>There are a number of ways to tackle this, including this very elegant solution: <a href="http://www.cut-the-knot.org/Curriculum/Probability/TriProbability.shtml">http://www.cut-the-knot.org/Curriculum/Probability/TriProbability.shtml</a>. For the less elegantly inclined (and those as unlikely as me to be working at Google any time soon), here&#8217;s another way:</p>
<p>The first insight is that we can think of the breaks as two separate events.  The first break can happen anywhere.  To make a triangle, the second break has to happen on the opposite half from the first break. Otherwise we&#8217;d end up with one stick being more than half the original length, and we can&#8217;t make a triangle if that&#8217;s the case.  The probability of the 2nd break being on the opposite half is 50%.</p>
<p>But even with this first condition met, we may still end up with one stick being longer than half the original, if the two breaks are close to the ends.  We also need the sum of the distances of the two breaks from the ends to be greater than 1/2 the length of the original stick. What&#8217;s the probability of that? The probability that two random numbers from 0 to .5 add up to more than .5 is 50%</p>
<p>So that&#8217;s a slightly long-winded way of arriving at the answer &#8211; the 2nd break has to satisfy two independent 50% chances, so we have a 1 in 4 chance of being able to make a triangle.</p>
<p>Google, you have my number.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=127#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-127 -->

		
	

	
			<div id="post-65" class="post-65 post type-post status-publish format-standard hentry category-puzzles tag-a-ha-moment tag-puzzles">
			<h2 class="entry-title"><a href="/?p=65" rel="bookmark">Puzzle &#8211; 4 Bugs chasing each other</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=65" title="7:37 pm" rel="bookmark"><span class="entry-date">February 21, 2010</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>The answer to this problem is either really obvious, or it&#8217;s not.</p>



<p>Say there are four bugs standing at the corners of an imaginary 1m * 1m square.&nbsp; Each of the bugs is facing the bug that is on the adjacent, clockwise corner from where they are.</p>



<p>At the same instant, each of the four bugs starts walking directly towards the bug they are facing at 1m per hour, and keeps walking directly towards that bug as that bug itself starts moving.&nbsp; So the four bugs spiral towards the center of the square in a clockwise direction.</p>



<p>How long does it take for the four bugs to meet?</p>



<p><strong>Answer</strong></p>



<p>There are two different insights one could have in thinking about this problem.&nbsp;</p>



<p>The first insight &#8211; let&#8217;s call it the<strong> &#8220;square formation&#8221;</strong> insight<strong> &#8211;</strong>&nbsp;is that the bugs will effectively always stay in a square formation in their path to the center. A shrinking and spiraling square, but a square that is always centered on the original center. This means that regardless of where the bugs are in their spiral towards the center, they will always be moving 45 degrees to a line connecting where they are to the center.</p>



<p>So one can calculate their effective velocity towards the center:</p>


<span class="wp-katex-eq" data-display="false">V_{center} = \cos\;45^\circ\;*\; V_{absolute}\\</span>


<span class="wp-katex-eq" data-display="false">V_{center} = \frac{1}{\sqrt(2)}\;m/hr</span>



<p></p>



<p>Since the total distance towards the center from the starting position is <span class="wp-katex-eq" data-display="false">\frac{1}{\sqrt(2)}\;m</span>, it will take the bugs 1hr to meet in the center.</p>



<p><span style="color: #000000;">Those that have the second insight &#8211; let&#8217;s call it the &#8220;<strong>perpendicular trajectory</strong>&#8221; insight &#8211; will think this problem is so obvious they&#8217;ll wonder what the fuss is about.&nbsp; </span>A bug&#8217;s movement towards the bug it is following is always perpendicular to the motion of the followed bug.&nbsp; So in effect the movement of the followed bug has no effect on how far the follower has to travel to reach it or how long it will take, so the follower has to travel 1 meter, and will catch up to the followed bug in 1 hr.&nbsp; A-ha!</p>



<p><strong>What if the 3 bugs were in an equilateral triangles with sides 1m?</strong></p>



<p>Same principle as the above:&nbsp; they stay in formation as they spiral to the center.&nbsp;&nbsp; One bug is heading towards the other at 1 meter per hour.&nbsp; In this case, the followed bug is making effective progress towards the follower at&nbsp; cos(60), or .5 meters per hour.&nbsp;&nbsp; So they have a combined speed of 1.5 meters per hour towards each other, so they should cover the 1 meter between them in 40 minutes.</p>



<p><input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"> <input id="gwProxy" type="hidden"> <input id="jsProxy" type="hidden"></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=a-ha-moment" rel="tag">a-ha moment</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=65#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-65 -->

		
	

	
			<div id="post-37" class="post-37 post type-post status-publish format-standard hentry category-puzzles tag-probability tag-puzzles">
			<h2 class="entry-title"><a href="/?p=37" rel="bookmark">Puzzle &#8211; Liars and Truthtellers</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=37" title="1:27 am" rel="bookmark"><span class="entry-date">December 31, 2009</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>This is another probability question that seems straightforward but can be deceptive&#8230;</p>



<p>You&#8217;re an FBI agent and have been monitoring a large gang, and you know that 1/4 of its members always tell the truth, the rest always lie.&nbsp; Then you get taken hostage by the gang, and two gang members are assigned to guard you.&nbsp; You ask the first:&nbsp;&#8220;Am I going to live?&#8221;&nbsp; He answers &#8220;Yes.&#8221;&nbsp; Then you ask the second the same question.&nbsp; He also answers &#8220;Yes.&#8221;&nbsp; What are your odds of living?</p>



<p>It can be tempting to say it&#8217;s the probability the first is telling the truth multipled by the probability the second is telling the truth, which would mean you have a 1/16th chance of living.</p>



<p>It&#8217;s not correct, however, because there&#8217;s another piece of information you have which is that they both gave the same answer.</p>



<p>Let&#8217;s look at the probability tree:</p>



<table class="wp-block-table"><tbody>
<tr>
<td>GUARD 1</td>
<td>GUARD 2</td>
<td>PROBABILITY</td>
</tr>
<tr>
<td>T</td>
<td>T</td>
<td>1/16</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>9/16</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>3/16</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>3/16</td>
</tr>
</tbody></table>



<p>The only two rows that apply to this problem are the first two &#8211; they can either both be telling the truth, or both be lying.&nbsp; The chances they&#8217;re both telling the truth is:</p>


<span class="wp-katex-eq" data-display="false">\frac{\frac{1}{16}}{\frac{1}{16}+\frac{9}{16}}=\frac{1}{10}</span>



<p></p>



<p>So, using the same table, what would your chances of living be if the first guard told you that you would live, but the second that you would die?</p>



<p>Looking at the table you&#8217;ll see that your chances are 50/50.</p>



<p><input id="gwProxy" type="hidden"></p>



<p><!--Session data--><br><input id="jsProxy" type="hidden"></p>



<p><input id="gwProxy" type="hidden"><input id="jsProxy" type="hidden"></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=37#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-37 -->

		
	

	
			<div id="post-35" class="post-35 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-puzzles">
			<h2 class="entry-title"><a href="/?p=35" rel="bookmark">Puzzle &#8211; shortest road system</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=35" title="11:20 pm" rel="bookmark"><span class="entry-date">June 19, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Let&#8217;s say you&#8217;re contracted to build roads to connect four towns that are at the corners of an imaginary square with sides 1 mile. What&#8217;s the shortest length of road system you can build so that every town can get to every other town?</p>



<p><em>The first answers that come to mind for most folks are either to do a perimeter road with one one side left off which is 3 miles or to build roads in the shape of an X &#8211; which pythagoras tells is would be 2 * sqrt(2) = 2.828 miles.</em></p>



<p>We can do better. Click on this <a href="http://www.jstor.org/pss/3619370">link</a> to see what the road system would look like, and the theory behind it.</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="440" height="495" src="http://localhost/wp-content/uploads/2019/06/440px-Steiner_4_points.svg_.png" alt="" class="wp-image-10028" srcset="/wp-content/uploads/2019/06/440px-Steiner_4_points.svg_.png 440w, /wp-content/uploads/2019/06/440px-Steiner_4_points.svg_-267x300.png 267w" sizes="auto, (max-width: 440px) 100vw, 440px"></figure>



<p>To work out the total length we can use some basic calculus:</p>



<p>Call <span class="wp-katex-eq" data-display="false">x</span> the length of shared highway in the middle. So the total length of the road will be:</p>


<span class="wp-katex-eq" data-display="false">l\;=\;4\sqrt{(\frac{1}{2})^2 + (\frac{(1-x)}{2})^2}\;+\;x</span>



<p></p>



<p>Simplifying:</p>


<span class="wp-katex-eq" data-display="false">l\;=\;\sqrt{4 + 4(1-x)^2}\;+\;x</span>



<p></p>



<p>We&#8217;re trying to find <span class="wp-katex-eq" data-display="false">x</span> where <span class="wp-katex-eq" data-display="false">l</span> is the shortest. So we can differentiate <span class="wp-katex-eq" data-display="false">l</span> with respect to <span class="wp-katex-eq" data-display="false">x</span>, and set this equal to zero. Recall the chaining rule from high school?</p>


<span class="wp-katex-eq" data-display="false">\frac{dl}{dx}\;=\;\frac{1}{2}\;*\;(4 + 4(1-x)^2)^{-\frac{1}{2}}\;*\;8(1-x)\;*\;-1\;+\;1\;=\;0</span>



<p></p>


<span class="wp-katex-eq" data-display="false">\frac{1}{\sqrt{4 + 4(1-x)^2}}\;=\;\frac{1}{4(1-x)}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">4 + 4(1-x)^2\;=\;\frac{1}{16(1-x)^2}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">12(1-x)^2\;=\;4</span>



<p></p>


<span class="wp-katex-eq" data-display="false">1-x\;=\;\sqrt{\frac{1}{3}}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">x\;=\;1-\sqrt{\frac{1}{3}}</span>



<p></p>



<p>And now we can substitute to find the total length of the road:</p>


<span class="wp-katex-eq" data-display="false">l\;=\;4 * \sqrt{\frac{1}{4} + \frac{1}{12}}\;+\;1\;-\;\sqrt{\frac{1}{3}}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">l\;=\;4 * \sqrt{\frac{1}{3}}\;+\;1\;-\;\sqrt{\frac{1}{3}}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">l\;=\;3 * \sqrt{\frac{1}{3}}\;+\;1</span>



<p></p>


<span class="wp-katex-eq" data-display="false">l\;=\;sqrt{3}\;+\;1</span>



<p></p>



<p>This works out to be 2.732 miles, a little better than our original X approach.</p>



<p>It&#8217;s neat that the angles turn out to be 120 degrees (as is shown in the link above). A colleague declared to me that this was &#8216;obvious&#8217;, but it&#8217;s not so obvious to me. Can anyone find a trigonometric way to solve this problem that doesn&#8217;t involve the calculus? Or at least provide an explanation for why the 120 degrees makes sense (other than that it&#8217;s a beautiful symmetry)?</p>



<p>Now, only because I&#8217;m a maniac and am weirdly enjoying doing high school Calculus for the first time in a while, I&#8217;m going to do this again this time picking <span class="wp-katex-eq" data-display="false">x</span> to be the distance from the shared highway to the edge of the square. So the shared highway length will be <span class="wp-katex-eq" data-display="false">1-2x</span>.</p>


<span class="wp-katex-eq" data-display="false">l\;=\;4\sqrt{\frac{1}{4} + x^2}\;+\;1\;-\;2x</span>



<p></p>



<p>Simplifying:</p>


<span class="wp-katex-eq" data-display="false">l\;=\;\sqrt{4 + 16x^2}\;+\;1\;-\;2x</span>



<p></p>



<p>Now we differentiate:</p>


<span class="wp-katex-eq" data-display="false">\frac{dl}{dx}\;=\;\frac{1}{2}\;*\;(4 + 16x^2)^{-\frac{1}{2}}\;*\;32x\;=\;2</span>



<p></p>


<span class="wp-katex-eq" data-display="false">\sqrt{4 + 16x^2}\;=\;\frac{1}{8x}</span>



<p></p>


<span class="wp-katex-eq" data-display="false">4+16x^2\;=\;64x^2</span>



<p></p>


<span class="wp-katex-eq" data-display="false">4\;=\;48x^2</span>



<p></p>


<span class="wp-katex-eq" data-display="false">x\;=\;sqrt{\frac{1}{12}}</span>



<p></p>



<p>Now we can substitute for the length:</p>


<span class="wp-katex-eq" data-display="false">l\;=\;4 * \sqrt{\frac{1}{4} + \frac{1}{12}}\;+\;1\;-\;\sqrt{\frac{1}{3}}</span>



<p>Which we can see is identical to what we had above, so our length is again:</p>



<p></p>



<p><span class="wp-katex-eq" data-display="false">l\;=\;sqrt{3}\;+\;1</span><br></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=35#comments">4 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-35 -->

		
	

	
			<div id="post-34" class="post-34 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-puzzles tag-quants">
			<h2 class="entry-title"><a href="/?p=34" rel="bookmark">Puzzle &#8211; Clock</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=34" title="6:51 pm" rel="bookmark"><span class="entry-date">June 14, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>It&#8217;s 3 O&#8217;Clock.</p>
<p>What will be the time when the minute and hour hands are next in the same position (coincident)?</p>
<p>One way to solve this problem:  start with the minute hand at the 12 and hour hand at the 3. Let&#8217;s call x the number of minute markers from 12 O&#8217;clock to where the hands meet. The minute hand will take x minutes to get there (it travels a minute marker a minute). The hour hand will need to travel (x-15) minute markers and we know it will take (x-15)*12 minutes to get there. When the hands meet, the same time will have elapsed for both so we can solve for x:</p>
<p>x = (x-15)*12<br>
x=12x-180<br>
11x=180<br>
x=180/11<br>
x=16 and 4/11 minutes</p>
<p>There&#8217;s a smarter way to solve this problem:  you realize that there&#8217;s 11 intervals at which the minute hand and the hour hand coincide over the course of a 12 hour period, so each is 60/11 minute markers apart on the clock face. The one after 3 O&#8217;Clock is the third, so it&#8217;s 60*3/11 minutes after the hour, which is 180/11 minutes.<em><br>
</em></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>, <a href="/?tag=quants" rel="tag">quants</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=34#comments">5 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-34 -->

		
	

	
			<div id="post-33" class="post-33 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-puzzles tag-quants">
			<h2 class="entry-title"><a href="/?p=33" rel="bookmark">More puzzles&#8230;</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=33" title="5:12 pm" rel="bookmark"><span class="entry-date">June 14, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>Some of these are from <a href="http://www.amazon.com/Heard-Street-Quantitative-Questions-Interviews/dp/0970055234">Heard on the Street</a> &#8211; a book of interview questions for <a href="http://en.wikipedia.org/wiki/Quantitative_analyst">Quants</a> I&#8217;m trying to get through. Well worth a read if you&#8217;re into this sort of thing&#8230;</p>
<p><strong>1. Two ropes of different lengths, and you know that if you were to light either of them at one end it burns through in an hour. How can use use them to measure 45 mins?</strong></p>
<p>Light the first of them at both ends, and at the same time the second at one end. When both lit ends of the first meet (after 30 mins), light the second end of the second rope (which should take another 15mins to meet the other lit end).</p>
<p>Bonus points on this one: is it a condition for this approach to work that the ropes burn at a constant rate?</p>
<p><strong>2. Two identical jugs, one with water, one with vodka. You pour a bit of vodka into the water, mix it, then pour the mix back to get the jugs to their original volumes. What&#8217;s the relationship between the new concentration of vodka in the vodka jug and water in the water jug?</strong></p>
<p>Like a lot of these, getting straight into the algebra is not a good idea. The key here is that the volume of vodka and water remains the same. Any that displacement of (say) vodka from the vodka jug must have been replaced by an identical amount of water &#8211; so in effect same amounts of vodka and water have just swapped places, and the concentrations are the same.</p>
<p><strong>3. Imagine you&#8217;re an ant (you can walk on walls but not fly) and you want to get from a bottom corner of a cubic room (1*1*1) to the extreme opposite corner (farthest from you). What&#8217;s your shortest path to get there?</strong></p>
<p>If you said walk diagonally along the floor to the opposite floor corner, then up the joint in the walls to the ceiling corner &#8211; a distance of 1 + sqrt(2), think again. Think of the room as a box that&#8217;s been laid flat, with the sides out so it&#8217;s like the cross on the swiss flag. The distance between the two corners in question is sqrt(5).</p>
<p><strong>4. Let&#8217;s say you have a bunch of 1*1*1 mini-cubes that you&#8217;ve assembled into a 10*10*10 big cube. Now let&#8217;s say the whole outer layer of the big cube becomes damaged and has to be replaced &#8211; how many new mini-cubes do you need?</strong></p>
<p>Two ways of doing this &#8211; the Plodders way and then a smart way. A Plodder would say you need a top and bottom layer (10*10 + 10*10 = 200) and 8 ring layers (8 * (10+10+8+8) = 288). Total 488.</p>
<p>The smart way is to think about the inner cube that&#8217;s left, which is 8*8*8, or 8^3. So your answer is 10^3 &#8211; 8^3. You should be able to do this in your head: 10^3 is 1000. 8^3 is the same as (2^3)^3, or 2^9. Everyone knows 2^10 which is 1024. 2^9 is half that, 512. 1000-512 is 488.</p>
<p><strong>5. Say there are 100 lights with switches (initially off), and 100 people. The first person goes through and flips every switch (so all the lights are on). The second person flips every second switch, so at this point half the lights are off again. The third person every third switch, and so on. By the time the 100th person goes through he just flips switch #100. At the end, how many light bulbs are turned on?</strong></p>
<p>The trick here is to understand that the number of times a switch gets flipped depends on the number of factors that switch number has. So for example switch #6 has an even number of factors &#8211; 1,2,3 and 6 &#8211; so it ends up off. You&#8217;ll see that most numbers have an even number of factors because they have product pairs (for example, 1 and 6, and 2 and 3). Which numbers don&#8217;t have product pairs? Well, they all have product pairs, but in some cases both numbers in the product pair are the same &#8211; when the number has an integer square root. So for example the product pairs for 9 are 1 and 9, and 3 and 3. So the people who flip the #9 switch are 1, 3 and 9 &#8211; an odd number that leaves the light turned on. So the lights left on are these &#8220;perfect squares&#8221; of 1, 4, 9, 16, 25, 36, 49, 64, 81 and 100.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>, <a href="/?tag=quants" rel="tag">quants</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=33#comments">2 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-33 -->

		
	

	
			<div id="post-26" class="post-26 post type-post status-publish format-standard hentry category-programming tag-interview-questions tag-linked-lists tag-python tag-recursion">
			<h2 class="entry-title"><a href="/?p=26" rel="bookmark">Mth to last &#8211; a recursive approach in Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=26" title="7:17 pm" rel="bookmark"><span class="entry-date">June 12, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>A collegue of mine was pondering the mthToLast problem for a LinkedList I&#8217;d <a href="/?p=12">blogged about previously</a> and sent me the following IM message:</p>



<pre class="wp-block-preformatted">just a guess - but can you use  recursion to solve your link list m problem? 
a method to track through the list which calls itself, 
then when you get to the end start incrementing a counter, 
and when it equals M return the value?
</pre>



<p>I think this is what he meant &#8211; and it seems to work. Not as scalable as the trailing pointer approach in the previous post, but an interesting exercise in recursion. You find the size at the end, and return it all the way back.  Simple, but recursion can blow your mind sometimes.<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Element:
    def __init__(self,value,next=None):
        self.value=value
        self.next=next

def findMToLast(element,m,counter=1):
    """ 
    >>> e1=Element(1)
    >>> e2=Element(2)
    >>> e3=Element(3)
    >>> e4=Element(4)
    >>> e1.next=e2
    >>> e2.next=e3
    >>> e3.next=e4
    >>> findMToLast(e1,1).value
    4
    >>> findMToLast(e1,2).value
    3
    >>> findMToLast(e1,3).value
    2
    >>> findMToLast(e1,4).value
    1
    """
    if element.next==None:
        if m==1: mtolast=element
        else: mtolast=None
        if counter==1: return mtolast
        return (counter,mtolast)
    (size,mtolast)=findMToLast(element.next,m,counter+1)
    if size-counter+1==m: mtolast=element
    if counter==1: return mtolast
    return (size,mtolast)

if __name__ == "__main__":
    import doctest
    doctest.testmod()</pre>



<p></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=linked-lists" rel="tag">linked lists</a>, <a href="/?tag=python" rel="tag">python</a>, <a href="/?tag=recursion" rel="tag">recursion</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=26#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-26 -->

		
	

	
			<div id="post-25" class="post-25 post type-post status-publish format-standard hentry category-programming tag-interview-questions tag-python tag-recursion">
			<h2 class="entry-title"><a href="/?p=25" rel="bookmark">Reverse a string using recursion in Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=25" title="1:52 am" rel="bookmark"><span class="entry-date">June 12, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p>I&#8217;ve always found recursion somewhat unnatural to think about, but somehow satisfying when I can see it unfolding in my mind &#8211; this simple exercise in reversing a string using recursion is a case in point&#8230;</p>
<pre>&gt;&gt;&gt; def reverse(str):
    if len(str)==1:
        return str
    else:
        return reverse(str[1:])+str[0]

&gt;&gt;&gt; reverse('hello')
'olleh'
&gt;&gt;&gt; 
</pre>
<p>Of course,  this is just a thought experiment.  In real-world Python, you&#8217;d do this:</p>
<pre>&gt;&gt;&gt; 'abcdef'[::-1]
'fedcba'
&gt;&gt;&gt;
</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=python" rel="tag">python</a>, <a href="/?tag=recursion" rel="tag">recursion</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=25#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-25 -->

		
	

	
			<div id="post-24" class="post-24 post type-post status-publish format-standard hentry category-programming tag-interview-questions tag-programming tag-python">
			<h2 class="entry-title"><a href="/?p=24" rel="bookmark">Deep copy and recursive references</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=24" title="1:59 am" rel="bookmark"><span class="entry-date">June 10, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Quick one about coding a deep copy and avoiding recursive references&#8230;</p>



<p>Let&#8217;s say we have an instance <em>a</em> which has a reference to an instance <em>b</em> and we have to do a deep copy of <em>a</em>. To do this, we need a deep copy of <em>b</em> as well.</p>



<p>But let&#8217;s say <em>b</em> had a reference back to <em>a</em>.</p>



<p>Here it is in Python (I know Python has its own __deepcopy__() method but the below is for illustrative purposes).</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class A:                                                                                                                                                                                                            
    def __init__(self,b=None):
        self.b=b
    def deepcopy(self):
        newA=A()
        newA.b=self.b.deepcopy()
        return newA
class B:
    def __init__(self,a=None):
        self.a=a
    def deepcopy(self):
        newB=B()
        newB.a=self.a.deepcopy()
        return newB</pre>



<p>Now let&#8217;s execute this:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">>>> a=A()
>>> b=B()
>>> a.b=b
>>> b.a=a
>>> newA=a.deepcopy()</pre>



<p>What happens? Not pretty &#8211; a recursion limit error.</p>



<p>To fix this, we can keep track in <em>a</em> as to whether that instance has already created a copy of itself, so when it is called back from <em>b</em> it can just return that instance. This is sometimes called the &#8220;memo&#8221; copy. See amended code below.<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class A:                                                                                                                                                                                                            
    def __init__(self,b=None):
        self.b=b
        self.memo=None
    def deepcopy(self):
        if self.memo==None:
            newA=A()
            self.memo=newA
            newA.b=self.b.deepcopy()
            self.memo=None
            return newA
        else:
            return self.memo
class B:
    def __init__(self,a=None):
        self.a=a
    def deepcopy(self):
        newB=B()
        newB.a=self.a.deepcopy()
        return newB</pre>



<p>Now when we execute:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">>>> a=A()
>>> b=B()
>>> a.b=b
>>> b.a=a
>>> newA=a.deepcopy()
>>> newA
&lt;__main__.A instance at 0x00D53A30>
>>> newA.b.a
&lt;__main__.A instance at 0x00D53A30>
>>> newA2=a.deepcopy()
>>> newA2
&lt;__main__.A instance at 0x00D53AF8>
>>> newA2.b.a
&lt;__main__.A instance at 0x00D53AF8>
>>> </pre>



<p>Note that the memo is removed just before the copy is handed back so that if you call deepcopy again you&#8217;ll get a new copy of <em>a</em>.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=programming" rel="tag">programming</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=24#comments">3 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-24 -->

		
	

	
			<div id="post-23" class="post-23 post type-post status-publish format-standard hentry category-finance tag-finance tag-yield-curves tag-zero-curves">
			<h2 class="entry-title"><a href="/?p=23" rel="bookmark">Bootstrapping Zero Curves</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=23" title="8:07 pm" rel="bookmark"><span class="entry-date">June 8, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p><strong>What is a yield curve</strong></p>



<p>A <a href="http://en.wikipedia.org/wiki/Yield_curve">yield curve</a> is a representation of what interest rates you could lock in today for investments over different periods. It&#8217;s effectively a set of yields for securities of different maturities (typically cash rates at the short end, futures and then swaps at the longer maturities &#8211; see the wikipedia entry). These yields are typically calculated from market prices using standard price/yield formulas.</p>



<p><strong>Why yield curves can&#8217;t directly be used in PV calculations</strong></p>



<p>The problem is that the quoted rates are from coupon paying securities and tell us the value of a series of cash flows, but they don&#8217;t tell us the rate for a cash flow at the maturity point independently of the other cash flows. So these rates don&#8217;t directly imply the present value of a dollar to be received at the maturity points &#8211; that is, they cant be used directly as discount rates.</p>



<p><strong>The Zero curve to the rescue</strong></p>



<p>A zero curve represents the set of interest rates assuming that there are no periodic cash flows &#8211; as though the rate reflects a single payment of interest and principal made at that maturity point on the curve. As such, the rate can directly provide the present value of a dollar received at these maturity points.</p>



<p>Let&#8217;s take a very simple example:</p>



<p>A yield curve with 3 points:<br>Year 1: 5%<br>Year 2: 6%<br>Year 3: 7%</p>



<p>This means if you invest $1:</p>



<ul class="wp-block-list">
<li>For 1 year, you&#8217;ll receive 5% interest plus your principal &#8211; $1.05 &#8211; at the end of year 1.</li>
<li>For 2 years, you&#8217;ll get 6% annually, with your principal included at the end of year 2. So you will get $.06 at the end of year 1, and $1.06 at the end of year 2.</li>
<li>For 3 years, you&#8217;ll get $.07 at the end of year 1, $.07 at the end of year 2 and $1.07 at the end of year 3.</li>
</ul>



<p>The key point here is that the 2 and 3 year rates effectively represent a coupon paying security. In the 2 year rate, $1 invested now for two years represents the combined PV of two cash flows. But what is the PV of just the second cash flow? If we can work this out, we&#8217;ll have a zero (or discount) rate at 2 years, enabling us to PV any money received 2 years in the future.</p>



<p><strong>Deriving Zero curves</strong></p>



<p>We know the PV of $1 received at the end of the first year using our basic time value of money formula:</p>


<span class="wp-katex-eq" data-display="false">PV = \frac{FV}{(1 + r)^n} = \frac{1}{(1 + .05)^1} = \frac{1}{1.05}</span>



<p></p>



<p>This is effectively the 1 year discount factor. So any monies received at the end of 1 year can be multiplied by this to get the PV. Building (or &#8220;bootstrapping&#8221;) the zero curve is obtaining these discount factors for all maturity points.</p>



<p>To get the zero rate, or discount factor, for the 2 year point, we can say that $1 invested today will equal the PV of 1st payment plus the PV of 2nd payment. So:</p>


<span class="wp-katex-eq" data-display="false">PV = 1 = (\frac{.06}{1.05}) + (\frac{1.06}{(1+r)^2})</span>



<p>(where r equals the 2 year discount factor)</p>



<p>Working this out, we end up with: </p>


<span class="wp-katex-eq" data-display="false">r_{\tiny{Z2}}=.0603</span>



<p> or 6.03%</p>



<p>For the 3rd year zero rate, we build on the above:</p>


<span class="wp-katex-eq" data-display="false">PV = 1 = (\frac{.07}{1.05}) + (\frac{.07}{(1+.0603)^2}) + (\frac{1.07}{(1+r)^3})</span>



<p> (where r equals the 3 year discount factor)</p>



<p>This gives us: </p>



<p></p>


<span class="wp-katex-eq" data-display="false">r_{\tiny{Z3}}=.07097</span>



<p> or 7.097%</p>



<p>Now we have our zero curve that we can used as discount rates for cash flows at the corresponding<br>maturities.</p>



<p>So the corresponding zero curve:<br>Year 1: 5%<br>Year 2: 6.03%<br>Year 3: 7.097%</p>



<p><strong>An observation</strong></p>



<p>It&#8217;s interesting to note that the zero rates are slightly higher than the yield curve rates when the curve is sloping upwards. If you have trouble seeing why think of an extreme case of a yield curve with 0% rate in year 1 and 100% rate in year 2.</p>



<p><strong>Implied forward rates</strong></p>



<p>Another concept worth touching on here are the implied forward rates from these zero rates. Let&#8217;s say we invest $1 for 2 years under our zero rate, which is 6.03%. This would give us a return of:</p>


<span class="wp-katex-eq" data-display="false">FV = 1 * (1 + .0603)^2 = 1.124236</span>



<p></p>



<p>We could also have invested for 1 year, then take that return and lock in a forward rate for the second year (the rate at the end of year 1 for investing for year 2). Under the rules of arbitrage, this forward rate for year 2 needs to give us the same return as investing for 2 years using the 2 year zero rate. So:</p>


<span class="wp-katex-eq" data-display="false">FV = 1.124236 = 1.05 * (1 + r_{\tiny{1,2}})</span>



<p> where <span class="wp-katex-eq" data-display="false">r_{\tiny{1,2}}</span> is the forward rate for the second year</p>



<p>This gives an implied forward rate <span class="wp-katex-eq" data-display="false">r_{\tiny{1,2}} = .070707 = 7.07%</span></p>



<p>You can keep building these implied forward rates for all future years using this technique.</p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=40" rel="category">finance</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=finance" rel="tag">finance</a>, <a href="/?tag=yield-curves" rel="tag">yield curves</a>, <a href="/?tag=zero-curves" rel="tag">zero curves</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=23#comments">5 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-23 -->

		
	

	
			<div id="post-22" class="post-22 post type-post status-publish format-standard hentry category-finance tag-finance tag-logarithms tag-mathematics">
			<h2 class="entry-title"><a href="/?p=22" rel="bookmark">The &#8220;Mathematical Constant&#8221; and Continuously Compouding Interest</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=22" title="12:28 am" rel="bookmark"><span class="entry-date">June 8, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>One of the (many) aspects of the &#8220;Mathematical Constant&#8221; <span class="wp-katex-eq" data-display="false">e</span> is that:</p>


<span class="wp-katex-eq" data-display="false">\lim_{x\to\infty} (1+\frac{1}{x})^x = e</span>



<p></p>



<p>This property makes <span class="wp-katex-eq" data-display="false">e</span> very useful for working on compounding interest problems. How so?</p>



<p>Let&#8217;s start with the basic time value of money formula giving the relationship between the PV (present value) and FV (future value) given R (the rate of interest):</p>


<span class="wp-katex-eq" data-display="false">FV = PV * (1 + R)^n</span>



<p></p>



<p>In the formula above <span class="wp-katex-eq" data-display="false">n</span> represents the number of compounding periods. Given normal conventions, this is typical represented as <span class="wp-katex-eq" data-display="false">m * Y</span> where m is months (or other periods &#8211; it represents how many chunks we divide the year into for receiving interest payments) and Y is years. Also, the <span class="wp-katex-eq" data-display="false">R</span> (or rate) above is normally quoted in years, so we should divide this by the months: <span class="wp-katex-eq" data-display="false">R/m</span>.</p>



<p>So now we have:</p>


<span class="wp-katex-eq" data-display="false">FV = PV * (1 + \frac{R}{m})^{mY}</span>



<p></p>



<p>We can make use of the <span class="wp-katex-eq" data-display="false">e</span> formula above if we want continuously compounding interest &#8211; that is where <span class="wp-katex-eq" data-display="false">m</span> is as high as possible, converging on <span class="wp-katex-eq" data-display="false">\infty</span>.</p>



<p>Let&#8217;s start by making <span class="wp-katex-eq" data-display="false">x=\frac{m}{R}</span> and we would get:</p>


<span class="wp-katex-eq" data-display="false">FV = PV * (1 + \frac{1}{x})^{x * YR}</span>



<p></p>



<p>We can now drop this into our formula for <span class="wp-katex-eq" data-display="false">e</span> given that we want m (or x, which is effectively our proxy for m) to approach <span class="wp-katex-eq" data-display="false">\infty</span>:</p>


<span class="wp-katex-eq" data-display="false">FV = PV * [\lim_{x\to\infty} (1+\frac{1}{x})^{x}]^{RY}</span>



<p></p>



<p>We can write this simply as:</p>


<span class="wp-katex-eq" data-display="false">FV = PV * e^{RY}</span>



<p></p>



<p>So if we invest $100 at 6.5% continuously compounding interest for a year, we will end up with:</p>


<span class="wp-katex-eq" data-display="false">FV = 100 * e^{.065*1}</span>


<span class="wp-katex-eq" data-display="false">FV = \$106.72</span>



<p></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=40" rel="category">finance</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=finance" rel="tag">finance</a>, <a href="/?tag=logarithms" rel="tag">logarithms</a>, <a href="/?tag=mathematics" rel="tag">mathematics</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=22#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-22 -->

		
	

	
			<div id="post-10052" class="post-10052 post type-post status-publish format-standard hentry category-mathematics category-puzzles tag-geometric-progressions tag-puzzles">
			<h2 class="entry-title"><a href="/?p=10052" rel="bookmark">Puzzle &#8211; Alternating coin toss game</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=10052" title="5:14 am" rel="bookmark"><span class="entry-date">June 5, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>A really simple problem, but needs a trick or two to solve quickly. </p>



<p><strong>Question:</strong> You take it in turns tossing a coin with a friend &#8211; you having the first toss &#8211; and keep going until one of you tosses heads and wins. What are the chances you&#8217;re the winner?</p>



<p><strong>Answer:</strong> <em>  The chances of me winning are the sum of my chances at each toss which is: 1/2 + 1/8 + 1/32&#8230; The chances of my friend winning are 1/4 + 1/16 + 1/64&#8230; </em></p>



<p>It may be immediately obvious to you that I&#8217;ll have twice my friend&#8217;s chances of winning.  So that would mean I have a 2/3 chance, and my friend a 1/3 chance.   </p>



<p>Let&#8217;s also think about this in terms of <em><a href="http://en.wikipedia.org/wiki/Geometric_progression">geometric progressions</a></em>.  First, some basics:</p>



<p><em> when r&lt;1: </em></p>



<p>    <em><span class="wp-katex-eq" data-display="false"> \sum_{n=0}^\infty cr^n = \frac{c}{1-r} </span> </em></p>



<p><em>and: </em></p>



<p><em><span class="wp-katex-eq" data-display="false"> \sum_{n=1}^\infty cr^{n-1} = \frac{c}{1-r} </span> </em></p>



<p><em>So if you can get your progression into one of the two forms above, you can just apply the formula on the right hand side. </em></p>



<p><em>Now start looking at this from the point of view of the guy starting second. His first toss has a probability of <span class="wp-katex-eq" data-display="false">\small(1/2)^2</span>, his second toss <span class="wp-katex-eq" data-display="false">\small(1/2)^4</span>, his third <span class="wp-katex-eq" data-display="false">\small(1/2)^6</span>. So we can see that on his nth toss, his probability will be <span class="wp-katex-eq" data-display="false">\small(1/2)^{2n}</span> with n starting at 1. </em></p>



<p><em>We see from the above formulas that when we have n starting at 1 we need to get our progression into the form: <span class="wp-katex-eq" data-display="false">{\small}cr^{n-1}</span>. So we need to expand as such: <span class="wp-katex-eq" data-display="false">(\frac{1}{2})^{2n} = (\frac{1}{4})^n = \frac{1}{4} * (\frac{1}{4})^{n-1}</span>. Now we have c=1/4 and r=1/4 to plug in: <span class="wp-katex-eq" data-display="false">\frac{c}{1-r} = \frac{\frac{1}{4}} {1 - \frac{1}{4}} = \frac{1}{3}</span>. </em></p>



<p><em>So of course, since someone has to win, the probability for the starter is 2/3. But let&#8217;s work this out. The starter&#8217;s probability at toss n is <span class="wp-katex-eq" data-display="false">\small(1/2)^{2n+1}</span> with n starting at 0. Since n starts at 0, we need to get this into the form: <span class="wp-katex-eq" data-display="false">{\small}cr^{n}</span>. Expanding as above: <span class="wp-katex-eq" data-display="false">(\frac{1}{2})^{2n+1} = \frac{1}{2} * (\frac{1}{4})^{n}</span>. Now we have c=1/2 and r=1/4 to plug in: <span class="wp-katex-eq" data-display="false">\frac{c}{1-r} = \frac{\frac{1}{2}} {1 - \frac{1}{4}} = \frac{2}{3}</span>.</em></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=13" rel="category">mathematics</a>, <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=geometric-progressions" rel="tag">geometric progressions</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=10052#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-10052 -->

		
	

	
			<div id="post-10051" class="post-10051 post type-post status-publish format-standard hentry category-programming tag-probability tag-puzzles">
			<h2 class="entry-title"><a href="/?p=10051" rel="bookmark">Puzzle &#8211; Roll a die for $</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=10051" title="5:13 am" rel="bookmark"><span class="entry-date">June 2, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>This is an interesting puzzle in that it shows a basic technique used in solving these kinds of probability puzzles, as well as in models for some derivatives pricing, without the need for conditional probability calculations.   Hint:  start with the last event where we know the expected winnings, and work backwards. </p>



<p><strong>Question:  </strong>It&#8217;s your birthday, and a generous uncle tells you that he&#8217;ll give you in dollars whatever number comes up when you roll a die &#8211; so you will win between $1 and $6. He makes it more interesting &#8211; if you don&#8217;t like what you roll the first time, you can roll again. And if you don&#8217;t like that, you can roll one more time &#8211; for a maximum of three rolls. Note that if you choose to throw again, you can&#8217;t go back to an earlier better roll. What&#8217;s your strategy to maximize your winnings?</p>



<p><strong>Answer: </strong><em> </em><em>The trick here is to realize that on the third roll (if you get that far) you&#8217;re really stuck with whatever comes up, and that on average on your third roll you&#8217;ll win $3.50. So on your second roll, you should stick with anything 4 or higher, anything less you go on to the third roll. So, on average, your winnings on the second roll are ($6 + $5 + $4 + $3.50 + $3.50 + $3.50)/6 which equals $4.25. So then on your first roll, you should stick with a 5 or a 6, but go on to your second roll with anything less. On average, your winnings overall if you stick with this strategy will be ($6 + $5 + $4.25 + $4.25 + $4.25 + $4.25) /6 which equals $4.67.</em></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=10051#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-10051 -->

		
	

	
			<div id="post-20" class="post-20 post type-post status-publish format-standard hentry category-puzzles tag-interview-questions tag-probability tag-puzzles">
			<h2 class="entry-title"><a href="/?p=20" rel="bookmark">Classic Probability Puzzles</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=20" title="11:52 pm" rel="bookmark"><span class="entry-date">June 1, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				<p><strong>1. I have two children. One of my children is a girl. What are the chances I have two girls?</strong></p>
<p style="text-align: left;"><em>The answer to this question is not 50/50. After being told that one of your children is a girl, you know there are 3 options (with equal probability each): GB, BG &amp; GG. So the answer is a 1/3 chance. Counterintuitive perhaps because people assume the question has stated that the first child is a girl &#8211; in which case it would be 50/50.</em></p>
<p><strong>2. There is a sixgun with two bullets in consecutive chambers pointed at your head. The bad guy spins it, then pulls the trigger. It clicks on an empty chamber. He then tells you that you have a choice: he pulls the trigger again or spins it first before pulling the trigger. Which to choose?</strong></p>
<p><em>My immediate intuition was to spin again &#8211; it would seem that if you were lucky enough for it not to fire once, you&#8217;re pushing your luck pulling the trigger again straight away. But now let&#8217;s think about it.</em></p>
<p><em>The probability of getting shot if you spin again is clearly 2/6, or 1/3. What if you don&#8217;t spin? The only way you&#8217;re going to get shot is if the you had landed on the one empty chamber just before the bullets &#8211; a 1/4 chance. So, perhaps counterintuitively, you&#8217;re better off just having the trigger pulled again with no spin.<br></em></p>
<p><strong>3. OK, this is a really hoary old chestnut &#8211; the Monty Hall problem.  You&#8217;re at a game show, and the host tells you the car is behind one of the three closed doors &#8211; and to choose a door. Before he opens your chosen door, he opens one of the two remaining doors that he tells you he knows the car is not behind, and then gives you the choice of sticking with your original pick or switching to the other unopened door. Which do you do?</strong></p>
<p><em>It&#8217;s not 50/50, even though there&#8217;s two doors left (although the probability across both equals 1). There&#8217;s many ways to think about it, but to me the one that makes the most sense is that no matter what, the probability that you picked the door in the first place remains 1 in 3. So if you were to pick out of a million doors, the host opening 1 million minus 2 doors leaving your pick and one remaining unopened door doesn&#8217;t suddenly up your chances of having picked the door from 1 in a million to 1 in 2. In the 3 door case, if your pick still has a 1/3 chance of having the car, the other door must have a 2/3 chance &#8211; so you in effect double your chances by switching doors.</em></p>


<p></p>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=3" rel="category">puzzles</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=probability" rel="tag">probability</a>, <a href="/?tag=puzzles" rel="tag">puzzles</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=20#comments">7 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-20 -->

		
	

	
			<div id="post-18" class="post-18 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-binary-trees tag-interview-questions tag-python">
			<h2 class="entry-title"><a href="/?p=18" rel="bookmark">Binary Search Tree &#8211; Lowest Common Ancestor &#8211; Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=18" title="3:53 am" rel="bookmark"><span class="entry-date">June 1, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>The last problem in the Trees chapter of <a href="http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1212292105&amp;sr=8-1">Programming Interviews Exposed</a> was about finding the lowest common ancestor between two nodes of a binary search tree. Starting from the head, if you find that the nodes that you&#8217;re looking for straddle the node you&#8217;re on, then you&#8217;ve found your lowest common ancestor. If they&#8217;re both on one side or the other, grab your child on that side, and recurse. The key is realizing that when you go left (for example) there will be no result on the left branch bigger than the right&#8217;s universe.<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def commonAncestor(node1,node2,head):
    """ 
    >>> node1=Node(1)
    >>> node4=Node(4)
    >>> node3=Node(3,node1,node4)
    >>> node7=Node(7)
    >>> node5=Node(5,node3,node7)
    >>> commonAncestor(node1,node7,node5).value
    5
    >>> commonAncestor(node7,node1,node5).value
    5
    >>> commonAncestor(node1,node5,node5).value
    5
    >>> commonAncestor(node1,node4,node5).value
    3
    >>> commonAncestor(node7,node7,node5).value
    7
    """
    maxNode=max([node1,node2], key=lambda item: item.value)
    minNode=min([node1,node2], key=lambda item: item.value)
    if head==None: return
    if (minNode.value &lt;= head.value) &amp; (maxNode.value >= head.value):
        return head
    if (minNode.value &lt;= head.value) &amp; (maxNode.value &lt;= head.value): 
        return commonAncestor(node1,node2,head.left) 
    if (minNode.value >= head.value) &amp; (maxNode.value >=head.value):
        return commonAncestor(minNode,maxNode,head.right)

class Node:
    def __init__(self,value,left=None,right=None):
        self.value=value
        self.left=left
        self.right=right

import doctest                                                                                                                                                                                                  
doctest.testmod()
</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=binary-trees" rel="tag">binary trees</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=18#comments">2 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-18 -->

		
	

	
			<div id="post-16" class="post-16 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-binary-trees tag-interview-questions tag-python">
			<h2 class="entry-title"><a href="/?p=16" rel="bookmark">Tree Traversal &#8211; Python</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=16" title="7:48 pm" rel="bookmark"><span class="entry-date">May 31, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Another question posed in the <a href="http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1212263197&amp;sr=8-1">Programming Interviews Exposed</a> book. A pre-ordered traversal of a binary tree (counterclockwise starting at root, printing nodes as you encounter them) is pretty straight forward, and a very natural thing to implement with recursion:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def traverse(node):
    """ 
    >>> node1=Node(1)
    >>> node2=Node(2)
    >>> node3=Node(3,node1,node2)
    >>> node4=Node(4)
    >>> node5=Node(5,node3,node4)
    >>> traverse(node5)
    5
    3
    1
    2
    4
    """
    if node==None: return
    print node.value
    traverse(node.left)
    traverse(node.right)
 
class Node:
    def __init__(self,value,left=None,right=None):
        self.value=value;self.left=left;self.right=right


import doctest
doctest.testmod()
</pre>



<p> A little trickier is an implementation without recursion:<br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def treeWalker(node):
    """
    >>> node1=Node(1)
    >>> node2=Node(2)
    >>> node3=Node(3,node1,node2)
    >>> node4=Node(4)
    >>> node5=Node(5,node3,node4)
    >>> treeWalker(node5)
    5
    3
    1
    2
    4
    """
    lifo=[]
    while True:
        print node.value
        if node.left!=None:
            lifo.append(node)
            node=node.left
        else:
            try:
                node=lifo.pop()
            except: 
                return None
            node=node.right
class Node:
    def __init__(self,value,left=None,right=None):
        self.value=value;self.left=left;self.right=right
        
import doctest
doctest.testmod()</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=binary-trees" rel="tag">binary trees</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=16#comments">4 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-16 -->

		
	

	
			<div id="post-14" class="post-14 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-interview-questions tag-python">
			<h2 class="entry-title"><a href="/?p=14" rel="bookmark">Linked List &#8211; Cyclic or Acyclic?</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=14" title="4:27 am" rel="bookmark"><span class="entry-date">May 30, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>Another problem in the <a href="http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1212272337&amp;sr=8-1">Programming Interviews Exposed </a>book (see previous post) is to determine whether a Linked List is cyclic or not.</p>



<p>The most obvious way to do this is to iterate over the list, checking whether the next element is one that you&#8217;ve seen before. So as you get to an element, you sweep back from head to current. </p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def isAcyclic1(head):
    """ 
    >>> e1=Element(1)
    >>> e2=Element(2)
    >>> e3=Element(3)
    >>> e4=Element(4)
    >>> e5=Element(5)
    >>> e1.next=e2
    >>> e2.next=e3
    >>> e3.next=e4
    >>> e4.next=e5
    >>> isAcyclic1(e1)
    True
    >>> e5.next=e3
    >>> isAcyclic1(e1)
    False
    >>> e5.next=e4
    >>> isAcyclic1(e1)
    False                                                                                                                                                                                                           
    >>> e5.next=e2
    >>> isAcyclic1(e1)
    False
    """
    curr=head
    while curr!=None:
        sweeper=head
        while sweeper!=curr:
            if curr.next==sweeper:
                return False
            sweeper=sweeper.next
        curr=curr.next
    return True

class Element:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next

if __name__ == "__main__":
    import doctest
    doctest.testmod()</pre>



<p>This is an O(n squared) solution. There&#8217;s a better way, of course.  You start a fast pointer, skipping elements, which if acyclic will get to the end quickly. If cyclic, it will eventually trip over the slow pointer. It turns out to be an O(n) solution. Smart.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def isAcyclic(head):

    """ 
    >>> e1=Element(1)
    >>> e2=Element(2)
    >>> e3=Element(3)
    >>> e4=Element(4)
    >>> e5=Element(5)
    >>> e1.next=e2
    >>> isAcyclic(e1)
    True
    >>> e2.next=e3
    >>> e3.next=e4
    >>> e4.next=e5
    >>> isAcyclic(e1)
    True
    >>> e5.next=e3
    >>> isAcyclic(e1)
    False
    >>> e5.next=e4
    >>> isAcyclic(e1)
    False
    >>> e5.next=e2
    >>> isAcyclic(e1)
    False                                                                                                                                                                                                           
    """
    slow=head
    fast=head
    while fast!=None and fast.next!=None:
        slow=slow.next
        fast=fast.next.next
        if (fast==slow):
            return False
    return True

class Element:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next

if __name__ == "__main__":
    import doctest
    doctest.testmod()</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=14#comments">3 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-14 -->

		
	

	
			<div id="post-13" class="post-13 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-interview-questions tag-linked-lists tag-python">
			<h2 class="entry-title"><a href="/?p=13" rel="bookmark">More on Linked Lists &#8211; flattening and unflattening</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=13" title="3:04 am" rel="bookmark"><span class="entry-date">May 30, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p>More from the <a href="http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1212272337&amp;sr=8-1">Programming Interviews Exposed</a> book (see last post). In this problem you take a double linked list (where each node knows its previous and next nodes) with child elements, and flatten it. Then unflatten it back to its original structure. It took me a few minutes to understand using recursion for unflattening.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Node:
    def __init__(self,data,prev=None,next=None,child=None):
        self.data=data
        self.prev=prev
        self.next=next
        self.child=child

class ListFlattener:
    """
    >>> node1=Node(1)
    >>> node5=Node(5)
    >>> node1.child=node5
    >>> node2=Node(2)
    >>> node3=Node(3,node1,None,node2)
    >>> node1.next=node3
    >>> node4=Node(4,node2)
    >>> node2.next=node4
    >>> ListFlattener.listAsArray(node1)
    [1, 3]
    >>> ListFlattener.flattenList(node1)
    >>> ListFlattener.listAsArray(node1)
    [1, 3, 5, 2, 4]
    >>> ListFlattener.unflattenList(node1)
    >>> ListFlattener.listAsArray(node1)
    [1, 3]
    >>> ListFlattener.flattenList(node1)
    >>> ListFlattener.listAsArray(node1)
    [1, 3, 5, 2, 4]
    >>> ListFlattener.listAsArray(ListFlattener.findTail(node1),False)
    [4, 2, 5, 3, 1]
    """
    @staticmethod
    def flattenList(head):
        curr=head
        tail=ListFlattener.findTail(head)
        while curr!=None:
            if curr.child!=None:
                tail=ListFlattener.appendChildToEnd(curr,curr.child,tail)
            curr=curr.next

    @staticmethod
    def unflattenList(head):
        curr=head
        while curr!=None:
            if curr.child!=None:
                curr.child.prev.next=None
                curr.child.prev=None
                ListFlattener.unflattenList(curr.child)
            curr=curr.next

    @staticmethod
    def appendChildToEnd(node,child,tail):
        tail.next=child
        child.prev=tail
        return ListFlattener.findTail(child)

    @staticmethod
    def findTail(node):
        while node.next!=None:
            node=node.next
        return node

    @staticmethod
    def listAsArray(node,forward=True):
        list=[]
        while node!=None:
            list.append(node.data)
            if forward:
                node=node.next
            else:
                node=node.prev
        return list

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</pre>


							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=linked-lists" rel="tag">linked lists</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=13#respond">Leave a comment</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-13 -->

		
	

	
			<div id="post-12" class="post-12 post type-post status-publish format-standard hentry category-programming tag-algorithms tag-interview-questions tag-python">
			<h2 class="entry-title"><a href="/?p=12" rel="bookmark">Linked List Interview questions</a></h2>

			<div class="entry-meta">
				<span class="meta-prep meta-prep-author">Posted on</span> <a href="/?p=12" title="4:10 am" rel="bookmark"><span class="entry-date">May 29, 2008</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="/?author=1" title="View all posts by nolfonzo">nolfonzo</a></span>			</div>
<!-- .entry-meta -->

					<div class="entry-content">
				
<p></p>



<p>I hadn&#8217;t done much programming for a while and thought I&#8217;d best brush up on some basic data structures and algorithm.  </p>



<p>The following is from  <a rel="noopener noreferrer" href="http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1212033139&amp;sr=8-1" target="_blank">Programming Interviews Exposed</a>.  I implemented some of the Linked List stuff in the first section in Python. The code came out pretty close to the solutions in the book which were mainly in C++. <br></p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="godzilla" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Stack:
    """
    Adapted from Programming Interviews Exposed problems
    LinkedList implementation that keeps track of head and tail

    Basic tests - push,pop,remove
    >>> s=Stack()
    >>> s.push(1)
    >>> s.push(2)
    >>> s.push(3)
    >>> s.push(4)
    >>> s.pop()
    4
    >>> e=s.head.next
    >>> s.remove(e)
    True
    >>> s.head.data
    3
    >>> s.tail.data
    1
    >>> e=s.head.next
    >>> s.remove(e)
    True
    >>> s.head.data
    3
    >>> s.tail.data
    3
    >>> e=s.head
    >>> s.remove(e)
    True
    >>> s.head
    >>> s.tail
    """

    def __init__(self):
        self.head=None
        self.tail=None

    def push(self,data):
        if self.head==None:
            self.head=Element(data,None)
            self.tail=self.head
        else:
            self.head=Element(data,self.head)

    def pop(self):
        oldhead=self.head
        if oldhead==None:
            return None
        self.head=oldhead.next
        if self.head==None:
            self.tail=None
        return oldhead.data

    def remove(self,element):
        if self.head==None:
            return False
        if self.head==element:
            self.head=self.head.next
            if self.head==None:
                self.tail=None
            return True
        curr=self.head
        while curr!=None:
            if curr.next==element:
                curr.next=curr.next.next
                if curr.next==None:
                    self.tail=curr
                return True
            else:
                curr=curr.next
                return False

    def insertAfter(self,element,data):
        """
        >>> s=Stack()
        >>> s.insertAfter(None,1)
        True
        >>> s.head.data
        1
        >>> s.tail.data
        1
        >>> s.insertAfter(None,2)
        True
        >>> s.head.data
        2
        >>> s.tail.data
        1
        >>> e=s.head
        >>> s.insertAfter(e,3)
        True
        >>> s.head.data
        2
        >>> s.tail.data
        1
        >>> s.head.next.data
        3
        >>> e=s.tail
        >>> s.insertAfter(e,4)
        True
        >>> s.head.data
        2
        >>> s.tail.data
        4
        """
        if (element==None)|(self.head==None):
            self.head=Element(data,self.head)
            if self.head.next==None:
                self.tail=self.head
            return True
        curr=self.head
        while curr!=None:
            if curr==element:
                curr.next=Element(data,curr.next)
                if curr.next.next==None:
                    self.tail=curr.next
                return True
            curr=curr.next
        return False

    def removeHead(self):
        """
        >>> s=Stack()
        >>> s.removeHead()
        >>> s.head
        >>> s.tail
        >>> s.push(1)
        >>> s.removeHead()
        >>> s.head
        >>> s.tail
        >>> s.push(1)
        >>> s.push(2)
        >>> s.removeHead()
        >>> s.head.data
        1
        >>> s.tail.data
        1
        """
        if self.head!=None:
            self.head=self.head.next
        if self.head==None:
            self.tail=None

    def findMToLastElement(self,m):
        """
        >>> s=Stack()
        >>> s.push(1)
        >>> s.push(2)
        >>> s.push(3)
        >>> s.findMToLastElement(0).data
        1
        >>> s.findMToLastElement(1).data
        2
        >>> s.findMToLastElement(2).data
        3
        >>> s.findMToLastElement(3)
        """
        mToLast=None
        curr=self.head
        count=0
        while curr!=None:
            if count==m:
                mToLast=self.head
            if count>m:
                mToLast=mToLast.next
                if mToLast==None:
                    return None
            curr=curr.next
            count+=1
        return mToLast

class Element:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</pre>
							</div>
<!-- .entry-content -->
	
			<div class="entry-utility">
									<span class="cat-links">
						<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="/?cat=6" rel="category">programming</a>					</span>
					<span class="meta-sep">|</span>
												<span class="tag-links">
					<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="/?tag=algorithms" rel="tag">algorithms</a>, <a href="/?tag=interview-questions" rel="tag">interview questions</a>, <a href="/?tag=python" rel="tag">python</a>				</span>
				<span class="meta-sep">|</span>
								<span class="comments-link"><a href="/?p=12#comments">2 Comments</a></span>
							</div>
<!-- .entry-utility -->
		</div>
<!-- #post-12 -->

		
	

			</div>
<!-- #content -->
		</div>
<!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="search-2" class="widget-container widget_search"><form role="search" method="get" id="searchform" class="searchform" action="/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s">
					<input type="submit" id="searchsubmit" value="Search">
				</div>
			</form></li>
<li id="categories-130544171" class="widget-container widget_categories">
<h3 class="widget-title">Categories</h3>
			<ul>
					<li class="cat-item cat-item-40">
<a href="/?cat=40">finance</a>
</li>
	<li class="cat-item cat-item-13">
<a href="/?cat=13">mathematics</a>
</li>
	<li class="cat-item cat-item-6">
<a href="/?cat=6">programming</a>
</li>
	<li class="cat-item cat-item-3">
<a href="/?cat=3">puzzles</a>
</li>
			</ul>

			</li>
		<li id="recent-posts-2" class="widget-container widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="/?p=10101">Dynamic Programming &#8211; basic examples</a>
									</li>
											<li>
					<a href="/?p=514">A simple Monte Carlo simulation in Python</a>
									</li>
											<li>
					<a href="/?p=458">Generating prime numbers using Numpy</a>
									</li>
											<li>
					<a href="/?p=431">Birthday simulations using Python and Numpy</a>
									</li>
											<li>
					<a href="/?p=392">Dijkstra Shortest Path using Python</a>
									</li>
					</ul>

		</li>
<li id="recent-comments-2" class="widget-container widget_recent_comments">
<h3 class="widget-title">Recent Comments</h3>
<ul id="recentcomments">
<li class="recentcomments">
<span class="comment-author-link">CHIRPzdf</span> on <a href="/?p=10101#038;cpage=1#comment-20312">Dynamic Programming &#8211; basic examples</a>
</li>
<li class="recentcomments">
<span class="comment-author-link"><a href="https://Github.com/101sam" class="url" rel="ugc external nofollow">?????? ?????</a></span> on <a href="/?p=10101#038;cpage=1#comment-19590">Dynamic Programming &#8211; basic examples</a>
</li>
<li class="recentcomments">
<span class="comment-author-link"><a href="http://dataversesystems.com/" class="url" rel="ugc external nofollow">AL Roitfarb</a></span> on <a href="/?p=23#038;cpage=1#comment-19536">Bootstrapping Zero Curves</a>
</li>
<li class="recentcomments">
<span class="comment-author-link"><a href="https://www.sunproprealestate.com/" class="url" rel="ugc external nofollow">apartment in portugal</a></span> on <a href="/?p=10101#038;cpage=1#comment-18646">Dynamic Programming &#8211; basic examples</a>
</li>
<li class="recentcomments">
<span class="comment-author-link"><a href="https://we.riseup.net/suriyanamsri" class="url" rel="ugc external nofollow">Sanora</a></span> on <a href="/?p=23#038;cpage=1#comment-18147">Bootstrapping Zero Curves</a>
</li>
</ul>
</li>
<li id="tag_cloud-2" class="widget-container widget_tag_cloud">
<h3 class="widget-title">Tags</h3>
<div class="tagcloud">
<ul class="wp-tag-cloud" role="list">
	<li><a href="/?tag=a-ha-moment" class="tag-cloud-link tag-link-20 tag-link-position-1" style="font-size: 8pt;" aria-label="a-ha moment (1 item)">a-ha moment</a></li>
	<li><a href="/?tag=algorithms" class="tag-cloud-link tag-link-8 tag-link-position-2" style="font-size: 17.032258064516pt;" aria-label="algorithms (7 items)">algorithms</a></li>
	<li><a href="/?tag=anagrams" class="tag-cloud-link tag-link-27 tag-link-position-3" style="font-size: 8pt;" aria-label="anagrams (1 item)">anagrams</a></li>
	<li><a href="/?tag=binary-trees" class="tag-cloud-link tag-link-11 tag-link-position-4" style="font-size: 10.709677419355pt;" aria-label="binary trees (2 items)">binary trees</a></li>
	<li><a href="/?tag=birthday-pairings" class="tag-cloud-link tag-link-25 tag-link-position-5" style="font-size: 8pt;" aria-label="birthday pairings (1 item)">birthday pairings</a></li>
	<li><a href="/?tag=dynamic-programming" class="tag-cloud-link tag-link-41 tag-link-position-6" style="font-size: 8pt;" aria-label="Dynamic Programming (1 item)">Dynamic Programming</a></li>
	<li><a href="/?tag=finance" class="tag-cloud-link tag-link-15 tag-link-position-7" style="font-size: 10.709677419355pt;" aria-label="finance (2 items)">finance</a></li>
	<li><a href="/?tag=geometric-progressions" class="tag-cloud-link tag-link-21 tag-link-position-8" style="font-size: 10.709677419355pt;" aria-label="geometric progressions (2 items)">geometric progressions</a></li>
	<li><a href="/?tag=graphs" class="tag-cloud-link tag-link-29 tag-link-position-9" style="font-size: 8pt;" aria-label="graphs (1 item)">graphs</a></li>
	<li><a href="/?tag=interview-questions" class="tag-cloud-link tag-link-5 tag-link-position-10" style="font-size: 22pt;" aria-label="interview questions (16 items)">interview questions</a></li>
	<li><a href="/?tag=linked-lists" class="tag-cloud-link tag-link-9 tag-link-position-11" style="font-size: 12.516129032258pt;" aria-label="linked lists (3 items)">linked lists</a></li>
	<li><a href="/?tag=logarithms" class="tag-cloud-link tag-link-14 tag-link-position-12" style="font-size: 10.709677419355pt;" aria-label="logarithms (2 items)">logarithms</a></li>
	<li><a href="/?tag=mathematics" class="tag-cloud-link tag-link-38 tag-link-position-13" style="font-size: 8pt;" aria-label="mathematics (1 item)">mathematics</a></li>
	<li><a href="/?tag=monte-carlo" class="tag-cloud-link tag-link-33 tag-link-position-14" style="font-size: 8pt;" aria-label="monte carlo (1 item)">monte carlo</a></li>
	<li><a href="/?tag=numpy" class="tag-cloud-link tag-link-30 tag-link-position-15" style="font-size: 10.709677419355pt;" aria-label="numpy (2 items)">numpy</a></li>
	<li><a href="/?tag=permutations" class="tag-cloud-link tag-link-24 tag-link-position-16" style="font-size: 8pt;" aria-label="permutations (1 item)">permutations</a></li>
	<li><a href="/?tag=prime-numbers" class="tag-cloud-link tag-link-32 tag-link-position-17" style="font-size: 8pt;" aria-label="prime numbers (1 item)">prime numbers</a></li>
	<li><a href="/?tag=probability" class="tag-cloud-link tag-link-12 tag-link-position-18" style="font-size: 17.784946236559pt;" aria-label="probability (8 items)">probability</a></li>
	<li><a href="/?tag=programming" class="tag-cloud-link tag-link-39 tag-link-position-19" style="font-size: 10.709677419355pt;" aria-label="programming (2 items)">programming</a></li>
	<li><a href="/?tag=puzzle" class="tag-cloud-link tag-link-22 tag-link-position-20" style="font-size: 8pt;" aria-label="puzzle (1 item)">puzzle</a></li>
	<li><a href="/?tag=puzzles" class="tag-cloud-link tag-link-37 tag-link-position-21" style="font-size: 19.139784946237pt;" aria-label="puzzles (10 items)">puzzles</a></li>
	<li><a href="/?tag=python" class="tag-cloud-link tag-link-7 tag-link-position-22" style="font-size: 21.247311827957pt;" aria-label="python (14 items)">python</a></li>
	<li><a href="/?tag=quants" class="tag-cloud-link tag-link-19 tag-link-position-23" style="font-size: 10.709677419355pt;" aria-label="quants (2 items)">quants</a></li>
	<li><a href="/?tag=recursion" class="tag-cloud-link tag-link-18 tag-link-position-24" style="font-size: 10.709677419355pt;" aria-label="recursion (2 items)">recursion</a></li>
	<li><a href="/?tag=shortest-path" class="tag-cloud-link tag-link-28 tag-link-position-25" style="font-size: 8pt;" aria-label="shortest path (1 item)">shortest path</a></li>
	<li><a href="/?tag=simulations" class="tag-cloud-link tag-link-31 tag-link-position-26" style="font-size: 8pt;" aria-label="simulations (1 item)">simulations</a></li>
	<li><a href="/?tag=stirlings-approximation" class="tag-cloud-link tag-link-26 tag-link-position-27" style="font-size: 8pt;" aria-label="stirling&#039;s approximation (1 item)">stirling&#039;s approximation</a></li>
	<li><a href="/?tag=yield-curves" class="tag-cloud-link tag-link-17 tag-link-position-28" style="font-size: 8pt;" aria-label="yield curves (1 item)">yield curves</a></li>
	<li><a href="/?tag=zero-curves" class="tag-cloud-link tag-link-16 tag-link-position-29" style="font-size: 8pt;" aria-label="zero curves (1 item)">zero curves</a></li>
</ul>
</div>
</li>
<li id="calendar-2" class="widget-container widget_calendar"><div id="calendar_wrap" class="calendar_wrap">
<table id="wp-calendar" class="wp-calendar-table">
	<caption>June 2025</caption>
	<thead>
	<tr>
		<th scope="col" aria-label="Monday">M</th>
		<th scope="col" aria-label="Tuesday">T</th>
		<th scope="col" aria-label="Wednesday">W</th>
		<th scope="col" aria-label="Thursday">T</th>
		<th scope="col" aria-label="Friday">F</th>
		<th scope="col" aria-label="Saturday">S</th>
		<th scope="col" aria-label="Sunday">S</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td colspan="6" class="pad">&nbsp;</td>
<td>1</td>
	</tr>
	<tr>
		<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
	</tr>
	<tr>
		<td>9</td>
<td id="today">10</td>
<td>11</td>
<td>12</td>
<td>13</td>
<td>14</td>
<td>15</td>
	</tr>
	<tr>
		<td>16</td>
<td>17</td>
<td>18</td>
<td>19</td>
<td>20</td>
<td>21</td>
<td>22</td>
	</tr>
	<tr>
		<td>23</td>
<td>24</td>
<td>25</td>
<td>26</td>
<td>27</td>
<td>28</td>
<td>29</td>
	</tr>
	<tr>
		<td>30</td>
		<td class="pad" colspan="6">&nbsp;</td>
	</tr>
	</tbody>
	</table>
<nav aria-label="Previous and next months" class="wp-calendar-nav">
		<span class="wp-calendar-nav-prev"><a href="/?m=202003">&laquo; Mar</a></span>
		<span class="pad">&nbsp;</span>
		<span class="wp-calendar-nav-next">&nbsp;</span>
	</nav>
</div></li>
<li id="archives-2" class="widget-container widget_archive">
<h3 class="widget-title">Archives</h3>
			<ul>
					<li><a href="/?m=202003">March 2020</a></li>
	<li><a href="/?m=201111">November 2011</a></li>
	<li><a href="/?m=201008">August 2010</a></li>
	<li><a href="/?m=201007">July 2010</a></li>
	<li><a href="/?m=201006">June 2010</a></li>
	<li><a href="/?m=201004">April 2010</a></li>
	<li><a href="/?m=201002">February 2010</a></li>
	<li><a href="/?m=200912">December 2009</a></li>
	<li><a href="/?m=200806">June 2008</a></li>
	<li><a href="/?m=200805">May 2008</a></li>
			</ul>

			</li>
<li id="meta-2" class="widget-container widget_meta">
<h3 class="widget-title">Meta</h3>
		<ul>
						<li><a href="/wp-login.php">Log in</a></li>
			<li><a href="/?feed=rss2">Entries feed</a></li>
			<li><a href="/?feed=comments-rss2">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</li>
<li id="text-132196301" class="widget-container widget_text">			<div class="textwidget"></div>
		</li>			</ul>
		</div>
<!-- #primary .widget-area -->

	</div>
<!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="/" title="Rebrained!" rel="home">
					Rebrained!				</a>
							</div>
<!-- #site-info -->

			<div id="site-generator">
								<a href="https://wordpress.org/" class="imprint" title="Semantic Personal Publishing Platform">
					Proudly powered by WordPress.				</a>
			</div>
<!-- #site-generator -->

		</div>
<!-- #colophon -->
	</div>
<!-- #footer -->

</div>
<!-- #wrapper -->

<script type="text/javascript"><!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="https://www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//--></script><link rel="stylesheet" id="katex-css" href="/wp-content/plugins/wp-katex/assets/katex.min.css?ver=0.10.1+1" type="text/css" media="all">
<script type="text/javascript" src="/wp-content/plugins/enlighter/resources/mootools-core-yc.js?ver=3.10.0" id="mootools-local-js"></script>
<script type="text/javascript" src="/wp-content/plugins/enlighter/resources/EnlighterJS.min.js?ver=3.10.0" id="enlighter-local-js"></script>
<script type="text/javascript" src="/wp-content/plugins/wp-katex/assets/katex.min.js?ver=0.10.1+1" id="katex-js"></script>
<script type="text/javascript">/* <![CDATA[ */EnlighterJS_Config = {"selector":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"language":"generic","theme":"enlighter","indent":2,"hover":"hoverEnabled","showLinenumbers":true,"rawButton":true,"infoButton":true,"windowButton":true,"rawcodeDoubleclick":false,"grouping":true,"cryptex":{"enabled":false,"email":"mail@example.tld"}};!function(){var a=function(a){var b="Enlighter Error: ";console.error?console.error(b+a):console.log&&console.log(b+a)};return window.addEvent?"undefined"==typeof EnlighterJS?void a("Javascript Resources not loaded yet!"):"undefined"==typeof EnlighterJS_Config?void a("Configuration not loaded yet!"):void window.addEvent("domready",function(){EnlighterJS.Util.Init(EnlighterJS_Config.selector.block,EnlighterJS_Config.selector.inline,EnlighterJS_Config)}):void a("MooTools Framework not loaded yet!")}();;/* ]]> */</script><script>!function(){"use strict";for(var e=document.querySelectorAll(".wp-katex-eq"),t=0;t<e.length;t++){var r=e[t],a=document.createElement("span");try{katex.render(r.textContent,a,{displayMode:"true"===r.getAttribute("data-display"),throwOnError:!1})}catch(n){a.style.color="red",a.textContent=n.message}r.parentNode.replaceChild(a,r)}}();</script>
</body>
</html>